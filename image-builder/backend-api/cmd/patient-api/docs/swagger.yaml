basePath: /patient/api
consumes:
- application/json
definitions:
  datastore.CreditCard:
    properties:
      brand:
        type: string
      created_at:
        type: string
      expiry:
        type: string
      id:
        type: integer
      is_default:
        type: boolean
      last_4_digits:
        type: string
      name:
        type: string
      patient_id:
        type: integer
      updated_at:
        type: string
    type: object
  datastore.Notification:
    properties:
      body:
        type: string
      created_at:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      is_read:
        type: boolean
      patient_id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  datastore.Payment:
    properties:
      amount:
        type: number
      created_at:
        type: string
      credit_card:
        $ref: '#/definitions/datastore.CreditCard'
      credit_card_id:
        type: integer
      id:
        type: integer
      invoice_id:
        type: integer
      method:
        type: string
      paid_at:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  handler.AddCreditCardRequest:
    properties:
      card_token:
        type: string
      is_default:
        type: boolean
      name:
        type: string
    required:
    - card_token
    type: object
  handler.CountUnReadNotificationResponse:
    properties:
      count:
        type: integer
    type: object
  handler.GetAppointmentResponse:
    properties:
      detail:
        type: string
      doctor:
        $ref: '#/definitions/hospital.DoctorOverview'
      duration:
        type: number
      end_date_time:
        type: string
      id:
        type: string
      invoice:
        $ref: '#/definitions/hospital.Invoice'
      next_appointment:
        type: string
      patient_id:
        type: string
      payment:
        $ref: '#/definitions/datastore.Payment'
      prescriptions:
        items:
          $ref: '#/definitions/hospital.Prescription'
        type: array
      start_date_time:
        type: string
      status:
        type: string
    type: object
  handler.GetAppointmentRoomIDResponse:
    properties:
      room_id:
        type: string
    type: object
  handler.GetNameResponse:
    properties:
      EN:
        $ref: '#/definitions/hospital.Name'
      TH:
        $ref: '#/definitions/hospital.Name'
    type: object
  handler.PayInvoiceWithCreditCardResponse:
    properties:
      amount:
        type: number
      created_at:
        type: string
      credit_card:
        $ref: '#/definitions/datastore.CreditCard'
      credit_card_id:
        type: integer
      failure_message:
        type: string
      id:
        type: integer
      invoice_id:
        type: integer
      method:
        type: string
      paid_at:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  handler.SetCreditCardIsDefaultRequest:
    properties:
      is_default:
        type: boolean
    type: object
  handler.SetNotificationTokenRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  handler.SigninRequest:
    properties:
      credential:
        type: string
    required:
    - credential
    type: object
  handler.SigninResponse:
    properties:
      expired_at:
        type: string
      phone_number:
        type: string
    type: object
  handler.VerifyOTPRequest:
    properties:
      otp:
        type: string
    required:
    - otp
    type: object
  handler.VerifyOTPResponse:
    properties:
      token:
        type: string
    type: object
  hospital.AppointmentOverview:
    properties:
      detail:
        type: string
      doctor:
        $ref: '#/definitions/hospital.DoctorOverview'
      end_date_time:
        type: string
      id:
        type: string
      patient:
        $ref: '#/definitions/hospital.PatientOverview'
      start_date_time:
        type: string
      status:
        type: string
    type: object
  hospital.CategorizedAppointment:
    properties:
      cancelled:
        items:
          $ref: '#/definitions/hospital.AppointmentOverview'
        type: array
      completed:
        items:
          $ref: '#/definitions/hospital.AppointmentOverview'
        type: array
      scheduled:
        items:
          $ref: '#/definitions/hospital.AppointmentOverview'
        type: array
    type: object
  hospital.DoctorOverview:
    properties:
      full_name:
        type: string
      id:
        type: string
      position:
        type: string
      profile_pic_url:
        type: string
    type: object
  hospital.Invoice:
    properties:
      id:
        type: integer
      invoice_discounts:
        items:
          $ref: '#/definitions/hospital.InvoiceDiscount'
        type: array
      invoice_items:
        items:
          $ref: '#/definitions/hospital.InvoiceItem'
        type: array
      paid:
        type: boolean
      total:
        type: number
    type: object
  hospital.InvoiceDiscount:
    properties:
      amount:
        type: number
      name:
        type: string
    type: object
  hospital.InvoiceItem:
    properties:
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  hospital.Name:
    properties:
      firstname:
        type: string
      full_name:
        type: string
      initial:
        type: string
      lastname:
        type: string
    type: object
  hospital.Patient:
    properties:
      birth_date:
        type: string
      blood_type:
        type: string
      height:
        type: number
      id:
        type: string
      name_en:
        $ref: '#/definitions/hospital.Name'
      name_th:
        $ref: '#/definitions/hospital.Name'
      national_id:
        type: string
      nationality:
        type: string
      passport_id:
        type: string
      phone_number:
        type: string
      profile_pic_url:
        type: string
      weight:
        type: number
    type: object
  hospital.PatientOverview:
    properties:
      full_name:
        type: string
      id:
        type: string
      profile_pic_url:
        type: string
    type: object
  hospital.Prescription:
    properties:
      amount:
        type: integer
      description:
        type: string
      name:
        type: string
      picture_url:
        type: string
    type: object
  server.ErrorResponse:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
  description: This is a Synthia patient backend API.
  title: Synthia Patient Backend API
  version: 1.0.0
paths:
  /appointment:
    get:
      responses:
        "200":
          description: List of appointment group by status
          schema:
            $ref: '#/definitions/hospital.CategorizedAppointment'
        "400":
          description: Patient not found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Get list of appointment of the patient
      tags:
      - Appointment
  /appointment/{appointmentID}:
    get:
      parameters:
      - description: ID of the appointment
        in: path
        name: appointmentID
        required: true
        type: integer
      responses:
        "200":
          description: An appointment detail
          schema:
            $ref: '#/definitions/handler.GetAppointmentResponse'
        "400":
          description: appointmentID is invalid
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: The patient doesn't own the appointment
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Appointment not found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Get an appointment detail by appointment ID
      tags:
      - Appointment
  /appointment/{appointmentID}/roomID:
    get:
      parameters:
      - description: ID of the appointment
        in: path
        name: appointmentID
        required: true
        type: integer
      responses:
        "200":
          description: Room ID for the appointment
          schema:
            $ref: '#/definitions/handler.GetAppointmentRoomIDResponse'
        "400":
          description: appointmentID is invalid
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: The patient doesn't own the appointment
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: RoomID of the appointment not found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Get room ID of the appointment
      tags:
      - Appointment
  /appointment/next:
    get:
      responses:
        "200":
          description: Overview of the appointment detail. If there is no scheduled
            appointment, empty body is returned
          schema:
            $ref: '#/definitions/hospital.AppointmentOverview'
        "400":
          description: Patient not found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Get next scheduled appointment
      tags:
      - Appointment
  /auth/signin:
    post:
      description: Initiate auth process with government credential which will sent
        OTP to patient's phone number
      parameters:
      - description: Patient government credential (Passport ID or National ID)
        in: body
        name: SigninRequest
        required: true
        schema:
          $ref: '#/definitions/handler.SigninRequest'
      responses:
        "201":
          description: OTP is sent to patient's phone number
          schema:
            $ref: '#/definitions/handler.SigninResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Provided credential is not in the hospital system
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Start signing-in with government credential
      tags:
      - Auth
  /auth/verify:
    post:
      description: Complete auth process with OTP verification. It will return token
        if verification success.
      parameters:
      - description: OTP that is sent to patient's phone number
        in: body
        name: VerifyOTPRequest
        required: true
        schema:
          $ref: '#/definitions/handler.VerifyOTPRequest'
      responses:
        "201":
          description: JWS Token for later use
          schema:
            $ref: '#/definitions/handler.VerifyOTPResponse'
        "400":
          description: OTP is invalid or expired
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Verify OTP and get token
      tags:
      - Auth
  /info:
    get:
      responses:
        "200":
          description: Patient information
          schema:
            $ref: '#/definitions/hospital.Patient'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Patient not found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Get patient information
      tags:
      - Info
  /info/name:
    get:
      responses:
        "200":
          description: Name of the patient in both Thai and English
          schema:
            $ref: '#/definitions/handler.GetNameResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Patient not found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Get patient name
      tags:
      - Info
  /notification:
    get:
      responses:
        "200":
          description: List of notifications
          schema:
            items:
              $ref: '#/definitions/datastore.Notification'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Get list of notification from latest to oldest
      tags:
      - Notification
    patch:
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Set all notification as read
      tags:
      - Notification
  /notification/{notificationID}:
    patch:
      parameters:
      - description: ID of the notification
        in: path
        name: notificationID
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Invalid notification id
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Patient doesn't own the notification
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Notification not found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Set specific notification to read
      tags:
      - Notification
  /notification/token:
    post:
      parameters:
      - description: Notification token
        in: body
        name: SetNotificationTokenRequest
        required: true
        schema:
          $ref: '#/definitions/handler.SetNotificationTokenRequest'
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Save patient device notification token
      tags:
      - Notification
  /notification/unread:
    get:
      responses:
        "200":
          description: Count of the unread notifications
          schema:
            $ref: '#/definitions/handler.CountUnReadNotificationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Get count of unread notifications
      tags:
      - Notification
  /payment/credit-card:
    get:
      responses:
        "200":
          description: List of saved cards
          schema:
            items:
              $ref: '#/definitions/datastore.CreditCard'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Get lists of saved credit cards
      tags:
      - Payment
    post:
      parameters:
      - description: Token from Omise and name of credit card
        in: body
        name: AddCreditCardRequest
        required: true
        schema:
          $ref: '#/definitions/handler.AddCreditCardRequest'
      responses:
        "201":
          description: Created
        "400":
          description: Limited number of credit cards is reached
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Add new credit card
      tags:
      - Payment
  /payment/credit-card/{cardID}:
    delete:
      parameters:
      - description: ID of the credit card to delete
        in: path
        name: cardID
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Invalid credit card ID
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Patient doesn't own the specified credit card
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Credit card not found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Delete saved credit card
      tags:
      - Payment
    patch:
      parameters:
      - description: ID of the credit card to set isDefault
        in: path
        name: cardID
        required: true
        type: integer
      - description: IsDefault status of the credit card
        in: body
        name: SetCreditCardIsDefaultRequest
        required: true
        schema:
          $ref: '#/definitions/handler.SetCreditCardIsDefaultRequest'
      responses:
        "200":
          description: OK
        "400":
          description: Invalid credit card ID
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Patient doesn't own the specified credit card
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Credit card not found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Set isDefault status of credit card
      tags:
      - Payment
  /payment/pay/{invoiceID}/credit-card/{cardID}:
    post:
      parameters:
      - description: ID of the credit card to be charged
        in: path
        name: cardID
        required: true
        type: integer
      - description: ID of the invoice to pay
        in: path
        name: invoiceID
        required: true
        type: integer
      responses:
        "201":
          description: Payment information
          schema:
            $ref: '#/definitions/handler.PayInvoiceWithCreditCardResponse'
        "400":
          description: Invalid credit card ID or invoice ID
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Patient doesn't own the specified credit card or invoice
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Credit card or invoice not found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      security:
      - UserID: []
      - JWSToken: []
      summary: Pay invoice with credit card method
      tags:
      - Payment
produces:
- application/json
securityDefinitions:
  JWSToken:
    in: header
    name: Authorization
    type: apiKey
  UserID:
    in: header
    name: X-USER-ID
    type: apiKey
swagger: "2.0"
