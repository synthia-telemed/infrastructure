// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package hospital

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type AppointmentListRelationFilter struct {
	Every *AppointmentWhereInput `json:"every,omitempty"`
	None  *AppointmentWhereInput `json:"none,omitempty"`
	Some  *AppointmentWhereInput `json:"some,omitempty"`
}

// GetEvery returns AppointmentListRelationFilter.Every, and is useful for accessing the field via an interface.
func (v *AppointmentListRelationFilter) GetEvery() *AppointmentWhereInput { return v.Every }

// GetNone returns AppointmentListRelationFilter.None, and is useful for accessing the field via an interface.
func (v *AppointmentListRelationFilter) GetNone() *AppointmentWhereInput { return v.None }

// GetSome returns AppointmentListRelationFilter.Some, and is useful for accessing the field via an interface.
func (v *AppointmentListRelationFilter) GetSome() *AppointmentWhereInput { return v.Some }

type AppointmentOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count"`
}

// GetCount returns AppointmentOrderByRelationAggregateInput.Count, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByRelationAggregateInput) GetCount() *SortOrder { return v.Count }

type AppointmentOrderByWithRelationInput struct {
	CreatedAt       *SortOrder                                 `json:"createdAt"`
	Detail          *SortOrder                                 `json:"detail"`
	Doctor          *DoctorOrderByWithRelationInput            `json:"doctor,omitempty"`
	DoctorId        *SortOrder                                 `json:"doctorId"`
	EndDateTime     *SortOrder                                 `json:"endDateTime"`
	Id              *SortOrder                                 `json:"id"`
	Invoice         *InvoiceOrderByWithRelationInput           `json:"invoice,omitempty"`
	NextAppointment *SortOrder                                 `json:"nextAppointment"`
	Patient         *PatientOrderByWithRelationInput           `json:"patient,omitempty"`
	PatientId       *SortOrder                                 `json:"patientId"`
	Prescriptions   *PrescriptionOrderByRelationAggregateInput `json:"prescriptions,omitempty"`
	StartDateTime   *SortOrder                                 `json:"startDateTime"`
	Status          *SortOrder                                 `json:"status"`
	UpdatedAt       *SortOrder                                 `json:"updatedAt"`
}

// GetCreatedAt returns AppointmentOrderByWithRelationInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetCreatedAt() *SortOrder { return v.CreatedAt }

// GetDetail returns AppointmentOrderByWithRelationInput.Detail, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetDetail() *SortOrder { return v.Detail }

// GetDoctor returns AppointmentOrderByWithRelationInput.Doctor, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetDoctor() *DoctorOrderByWithRelationInput {
	return v.Doctor
}

// GetDoctorId returns AppointmentOrderByWithRelationInput.DoctorId, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetDoctorId() *SortOrder { return v.DoctorId }

// GetEndDateTime returns AppointmentOrderByWithRelationInput.EndDateTime, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetEndDateTime() *SortOrder { return v.EndDateTime }

// GetId returns AppointmentOrderByWithRelationInput.Id, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetId() *SortOrder { return v.Id }

// GetInvoice returns AppointmentOrderByWithRelationInput.Invoice, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetInvoice() *InvoiceOrderByWithRelationInput {
	return v.Invoice
}

// GetNextAppointment returns AppointmentOrderByWithRelationInput.NextAppointment, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetNextAppointment() *SortOrder {
	return v.NextAppointment
}

// GetPatient returns AppointmentOrderByWithRelationInput.Patient, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetPatient() *PatientOrderByWithRelationInput {
	return v.Patient
}

// GetPatientId returns AppointmentOrderByWithRelationInput.PatientId, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetPatientId() *SortOrder { return v.PatientId }

// GetPrescriptions returns AppointmentOrderByWithRelationInput.Prescriptions, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetPrescriptions() *PrescriptionOrderByRelationAggregateInput {
	return v.Prescriptions
}

// GetStartDateTime returns AppointmentOrderByWithRelationInput.StartDateTime, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetStartDateTime() *SortOrder { return v.StartDateTime }

// GetStatus returns AppointmentOrderByWithRelationInput.Status, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetStatus() *SortOrder { return v.Status }

// GetUpdatedAt returns AppointmentOrderByWithRelationInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AppointmentOrderByWithRelationInput) GetUpdatedAt() *SortOrder { return v.UpdatedAt }

type AppointmentRelationFilter struct {
	Is    *AppointmentWhereInput `json:"is,omitempty"`
	IsNot *AppointmentWhereInput `json:"isNot,omitempty"`
}

// GetIs returns AppointmentRelationFilter.Is, and is useful for accessing the field via an interface.
func (v *AppointmentRelationFilter) GetIs() *AppointmentWhereInput { return v.Is }

// GetIsNot returns AppointmentRelationFilter.IsNot, and is useful for accessing the field via an interface.
func (v *AppointmentRelationFilter) GetIsNot() *AppointmentWhereInput { return v.IsNot }

type AppointmentStatus string

const (
	AppointmentStatusCancelled AppointmentStatus = "CANCELLED"
	AppointmentStatusCompleted AppointmentStatus = "COMPLETED"
	AppointmentStatusScheduled AppointmentStatus = "SCHEDULED"
)

type AppointmentWhereInput struct {
	UpdatedAt       *DateTimeFilter                 `json:"updatedAt,omitempty"`
	Status          *EnumAppointmentStatusFilter    `json:"status,omitempty"`
	StartDateTime   *DateTimeFilter                 `json:"startDateTime,omitempty"`
	CreatedAt       *DateTimeFilter                 `json:"createdAt,omitempty"`
	Detail          *StringFilter                   `json:"detail,omitempty"`
	Doctor          *DoctorRelationFilter           `json:"doctor,omitempty"`
	DoctorId        *IntFilter                      `json:"doctorId,omitempty"`
	EndDateTime     *DateTimeFilter                 `json:"endDateTime,omitempty"`
	Id              *IntFilter                      `json:"id,omitempty"`
	Invoice         *InvoiceRelationFilter          `json:"invoice,omitempty"`
	NextAppointment *DateTimeNullableFilter         `json:"nextAppointment,omitempty"`
	Patient         *PatientRelationFilter          `json:"patient,omitempty"`
	PatientId       *StringFilter                   `json:"patientId,omitempty"`
	Prescriptions   *PrescriptionListRelationFilter `json:"prescriptions,omitempty"`
	OR              []*AppointmentWhereInput        `json:"OR,omitempty"`
	NOT             []*AppointmentWhereInput        `json:"NOT,omitempty"`
	AND             []*AppointmentWhereInput        `json:"AND,omitempty"`
}

// GetAND returns AppointmentWhereInput.AND, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetAND() []*AppointmentWhereInput { return v.AND }

// GetNOT returns AppointmentWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetNOT() []*AppointmentWhereInput { return v.NOT }

// GetOR returns AppointmentWhereInput.OR, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetOR() []*AppointmentWhereInput { return v.OR }

// GetCreatedAt returns AppointmentWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetDetail returns AppointmentWhereInput.Detail, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetDetail() *StringFilter { return v.Detail }

// GetDoctor returns AppointmentWhereInput.Doctor, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetDoctor() *DoctorRelationFilter { return v.Doctor }

// GetDoctorId returns AppointmentWhereInput.DoctorId, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetDoctorId() *IntFilter { return v.DoctorId }

// GetEndDateTime returns AppointmentWhereInput.EndDateTime, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetEndDateTime() *DateTimeFilter { return v.EndDateTime }

// GetId returns AppointmentWhereInput.Id, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetId() *IntFilter { return v.Id }

// GetInvoice returns AppointmentWhereInput.Invoice, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetInvoice() *InvoiceRelationFilter { return v.Invoice }

// GetNextAppointment returns AppointmentWhereInput.NextAppointment, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetNextAppointment() *DateTimeNullableFilter {
	return v.NextAppointment
}

// GetPatient returns AppointmentWhereInput.Patient, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetPatient() *PatientRelationFilter { return v.Patient }

// GetPatientId returns AppointmentWhereInput.PatientId, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetPatientId() *StringFilter { return v.PatientId }

// GetPrescriptions returns AppointmentWhereInput.Prescriptions, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetPrescriptions() *PrescriptionListRelationFilter {
	return v.Prescriptions
}

// GetStartDateTime returns AppointmentWhereInput.StartDateTime, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetStartDateTime() *DateTimeFilter { return v.StartDateTime }

// GetStatus returns AppointmentWhereInput.Status, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetStatus() *EnumAppointmentStatusFilter { return v.Status }

// GetUpdatedAt returns AppointmentWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AppointmentWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

type BloodType string

const (
	BloodTypeA  BloodType = "A"
	BloodTypeAb BloodType = "AB"
	BloodTypeB  BloodType = "B"
	BloodTypeO  BloodType = "O"
)

type BoolFilter struct {
	Equals *bool             `json:"equals"`
	Not    *NestedBoolFilter `json:"not,omitempty"`
}

// GetEquals returns BoolFilter.Equals, and is useful for accessing the field via an interface.
func (v *BoolFilter) GetEquals() *bool { return v.Equals }

// GetNot returns BoolFilter.Not, and is useful for accessing the field via an interface.
func (v *BoolFilter) GetNot() *NestedBoolFilter { return v.Not }

type DateTimeFilter struct {
	Equals *time.Time            `json:"equals"`
	Gt     *time.Time            `json:"gt"`
	Gte    *time.Time            `json:"gte"`
	In     []time.Time           `json:"in"`
	Lt     *time.Time            `json:"lt"`
	Lte    *time.Time            `json:"lte"`
	Not    *NestedDateTimeFilter `json:"not,omitempty"`
	NotIn  []time.Time           `json:"notIn"`
}

// GetEquals returns DateTimeFilter.Equals, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetEquals() *time.Time { return v.Equals }

// GetGt returns DateTimeFilter.Gt, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetGt() *time.Time { return v.Gt }

// GetGte returns DateTimeFilter.Gte, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetGte() *time.Time { return v.Gte }

// GetIn returns DateTimeFilter.In, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetIn() []time.Time { return v.In }

// GetLt returns DateTimeFilter.Lt, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetLt() *time.Time { return v.Lt }

// GetLte returns DateTimeFilter.Lte, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetLte() *time.Time { return v.Lte }

// GetNot returns DateTimeFilter.Not, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetNot() *NestedDateTimeFilter { return v.Not }

// GetNotIn returns DateTimeFilter.NotIn, and is useful for accessing the field via an interface.
func (v *DateTimeFilter) GetNotIn() []time.Time { return v.NotIn }

type DateTimeNullableFilter struct {
	Equals *time.Time                    `json:"equals"`
	Gt     *time.Time                    `json:"gt"`
	Gte    *time.Time                    `json:"gte"`
	In     []time.Time                   `json:"in"`
	Lt     *time.Time                    `json:"lt"`
	Lte    *time.Time                    `json:"lte"`
	Not    *NestedDateTimeNullableFilter `json:"not,omitempty"`
	NotIn  []time.Time                   `json:"notIn"`
}

// GetEquals returns DateTimeNullableFilter.Equals, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetEquals() *time.Time { return v.Equals }

// GetGt returns DateTimeNullableFilter.Gt, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetGt() *time.Time { return v.Gt }

// GetGte returns DateTimeNullableFilter.Gte, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetGte() *time.Time { return v.Gte }

// GetIn returns DateTimeNullableFilter.In, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetIn() []time.Time { return v.In }

// GetLt returns DateTimeNullableFilter.Lt, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetLt() *time.Time { return v.Lt }

// GetLte returns DateTimeNullableFilter.Lte, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetLte() *time.Time { return v.Lte }

// GetNot returns DateTimeNullableFilter.Not, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetNot() *NestedDateTimeNullableFilter { return v.Not }

// GetNotIn returns DateTimeNullableFilter.NotIn, and is useful for accessing the field via an interface.
func (v *DateTimeNullableFilter) GetNotIn() []time.Time { return v.NotIn }

type DoctorOrderByWithRelationInput struct {
	Appointments  *AppointmentOrderByRelationAggregateInput `json:"appointments,omitempty"`
	CreatedAt     *SortOrder                                `json:"createdAt"`
	Firstname_en  *SortOrder                                `json:"firstname_en"`
	Firstname_th  *SortOrder                                `json:"firstname_th"`
	Id            *SortOrder                                `json:"id"`
	Initial_en    *SortOrder                                `json:"initial_en"`
	Initial_th    *SortOrder                                `json:"initial_th"`
	Lastname_en   *SortOrder                                `json:"lastname_en"`
	Lastname_th   *SortOrder                                `json:"lastname_th"`
	Password      *SortOrder                                `json:"password"`
	Position      *SortOrder                                `json:"position"`
	ProfilePicURL *SortOrder                                `json:"profilePicURL"`
	UpdatedAt     *SortOrder                                `json:"updatedAt"`
	Username      *SortOrder                                `json:"username"`
}

// GetAppointments returns DoctorOrderByWithRelationInput.Appointments, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetAppointments() *AppointmentOrderByRelationAggregateInput {
	return v.Appointments
}

// GetCreatedAt returns DoctorOrderByWithRelationInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetCreatedAt() *SortOrder { return v.CreatedAt }

// GetFirstname_en returns DoctorOrderByWithRelationInput.Firstname_en, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetFirstname_en() *SortOrder { return v.Firstname_en }

// GetFirstname_th returns DoctorOrderByWithRelationInput.Firstname_th, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetFirstname_th() *SortOrder { return v.Firstname_th }

// GetId returns DoctorOrderByWithRelationInput.Id, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetId() *SortOrder { return v.Id }

// GetInitial_en returns DoctorOrderByWithRelationInput.Initial_en, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetInitial_en() *SortOrder { return v.Initial_en }

// GetInitial_th returns DoctorOrderByWithRelationInput.Initial_th, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetInitial_th() *SortOrder { return v.Initial_th }

// GetLastname_en returns DoctorOrderByWithRelationInput.Lastname_en, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetLastname_en() *SortOrder { return v.Lastname_en }

// GetLastname_th returns DoctorOrderByWithRelationInput.Lastname_th, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetLastname_th() *SortOrder { return v.Lastname_th }

// GetPassword returns DoctorOrderByWithRelationInput.Password, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetPassword() *SortOrder { return v.Password }

// GetPosition returns DoctorOrderByWithRelationInput.Position, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetPosition() *SortOrder { return v.Position }

// GetProfilePicURL returns DoctorOrderByWithRelationInput.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetProfilePicURL() *SortOrder { return v.ProfilePicURL }

// GetUpdatedAt returns DoctorOrderByWithRelationInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetUpdatedAt() *SortOrder { return v.UpdatedAt }

// GetUsername returns DoctorOrderByWithRelationInput.Username, and is useful for accessing the field via an interface.
func (v *DoctorOrderByWithRelationInput) GetUsername() *SortOrder { return v.Username }

type DoctorRelationFilter struct {
	Is    *DoctorWhereInput `json:"is,omitempty"`
	IsNot *DoctorWhereInput `json:"isNot,omitempty"`
}

// GetIs returns DoctorRelationFilter.Is, and is useful for accessing the field via an interface.
func (v *DoctorRelationFilter) GetIs() *DoctorWhereInput { return v.Is }

// GetIsNot returns DoctorRelationFilter.IsNot, and is useful for accessing the field via an interface.
func (v *DoctorRelationFilter) GetIsNot() *DoctorWhereInput { return v.IsNot }

type DoctorWhereInput struct {
	Username      *StringFilter                  `json:"username,omitempty"`
	UpdatedAt     *DateTimeFilter                `json:"updatedAt,omitempty"`
	ProfilePicURL *StringFilter                  `json:"profilePicURL,omitempty"`
	Appointments  *AppointmentListRelationFilter `json:"appointments,omitempty"`
	CreatedAt     *DateTimeFilter                `json:"createdAt,omitempty"`
	Firstname_en  *StringFilter                  `json:"firstname_en,omitempty"`
	Firstname_th  *StringFilter                  `json:"firstname_th,omitempty"`
	Id            *IntFilter                     `json:"id,omitempty"`
	Initial_en    *StringFilter                  `json:"initial_en,omitempty"`
	Initial_th    *StringFilter                  `json:"initial_th,omitempty"`
	Lastname_en   *StringFilter                  `json:"lastname_en,omitempty"`
	Lastname_th   *StringFilter                  `json:"lastname_th,omitempty"`
	Password      *StringFilter                  `json:"password,omitempty"`
	Position      *StringFilter                  `json:"position,omitempty"`
	OR            []*DoctorWhereInput            `json:"OR,omitempty"`
	NOT           []*DoctorWhereInput            `json:"NOT,omitempty"`
	AND           []*DoctorWhereInput            `json:"AND,omitempty"`
}

// GetAND returns DoctorWhereInput.AND, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetAND() []*DoctorWhereInput { return v.AND }

// GetNOT returns DoctorWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetNOT() []*DoctorWhereInput { return v.NOT }

// GetOR returns DoctorWhereInput.OR, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetOR() []*DoctorWhereInput { return v.OR }

// GetAppointments returns DoctorWhereInput.Appointments, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetAppointments() *AppointmentListRelationFilter { return v.Appointments }

// GetCreatedAt returns DoctorWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetFirstname_en returns DoctorWhereInput.Firstname_en, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetFirstname_en() *StringFilter { return v.Firstname_en }

// GetFirstname_th returns DoctorWhereInput.Firstname_th, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetFirstname_th() *StringFilter { return v.Firstname_th }

// GetId returns DoctorWhereInput.Id, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetId() *IntFilter { return v.Id }

// GetInitial_en returns DoctorWhereInput.Initial_en, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetInitial_en() *StringFilter { return v.Initial_en }

// GetInitial_th returns DoctorWhereInput.Initial_th, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetInitial_th() *StringFilter { return v.Initial_th }

// GetLastname_en returns DoctorWhereInput.Lastname_en, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetLastname_en() *StringFilter { return v.Lastname_en }

// GetLastname_th returns DoctorWhereInput.Lastname_th, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetLastname_th() *StringFilter { return v.Lastname_th }

// GetPassword returns DoctorWhereInput.Password, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetPassword() *StringFilter { return v.Password }

// GetPosition returns DoctorWhereInput.Position, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetPosition() *StringFilter { return v.Position }

// GetProfilePicURL returns DoctorWhereInput.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetProfilePicURL() *StringFilter { return v.ProfilePicURL }

// GetUpdatedAt returns DoctorWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

// GetUsername returns DoctorWhereInput.Username, and is useful for accessing the field via an interface.
func (v *DoctorWhereInput) GetUsername() *StringFilter { return v.Username }

type EnumAppointmentStatusFilter struct {
	Equals *AppointmentStatus                 `json:"equals"`
	In     []AppointmentStatus                `json:"in"`
	Not    *NestedEnumAppointmentStatusFilter `json:"not,omitempty"`
	NotIn  []AppointmentStatus                `json:"notIn"`
}

// GetEquals returns EnumAppointmentStatusFilter.Equals, and is useful for accessing the field via an interface.
func (v *EnumAppointmentStatusFilter) GetEquals() *AppointmentStatus { return v.Equals }

// GetIn returns EnumAppointmentStatusFilter.In, and is useful for accessing the field via an interface.
func (v *EnumAppointmentStatusFilter) GetIn() []AppointmentStatus { return v.In }

// GetNot returns EnumAppointmentStatusFilter.Not, and is useful for accessing the field via an interface.
func (v *EnumAppointmentStatusFilter) GetNot() *NestedEnumAppointmentStatusFilter { return v.Not }

// GetNotIn returns EnumAppointmentStatusFilter.NotIn, and is useful for accessing the field via an interface.
func (v *EnumAppointmentStatusFilter) GetNotIn() []AppointmentStatus { return v.NotIn }

type EnumBloodTypeFilter struct {
	Equals *BloodType                 `json:"equals"`
	In     []BloodType                `json:"in"`
	Not    *NestedEnumBloodTypeFilter `json:"not,omitempty"`
	NotIn  []BloodType                `json:"notIn"`
}

// GetEquals returns EnumBloodTypeFilter.Equals, and is useful for accessing the field via an interface.
func (v *EnumBloodTypeFilter) GetEquals() *BloodType { return v.Equals }

// GetIn returns EnumBloodTypeFilter.In, and is useful for accessing the field via an interface.
func (v *EnumBloodTypeFilter) GetIn() []BloodType { return v.In }

// GetNot returns EnumBloodTypeFilter.Not, and is useful for accessing the field via an interface.
func (v *EnumBloodTypeFilter) GetNot() *NestedEnumBloodTypeFilter { return v.Not }

// GetNotIn returns EnumBloodTypeFilter.NotIn, and is useful for accessing the field via an interface.
func (v *EnumBloodTypeFilter) GetNotIn() []BloodType { return v.NotIn }

type FloatFilter struct {
	Equals *float64           `json:"equals"`
	Gt     *float64           `json:"gt"`
	Gte    *float64           `json:"gte"`
	In     []float64          `json:"in"`
	Lt     *float64           `json:"lt"`
	Lte    *float64           `json:"lte"`
	Not    *NestedFloatFilter `json:"not,omitempty"`
	NotIn  []float64          `json:"notIn"`
}

// GetEquals returns FloatFilter.Equals, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetEquals() *float64 { return v.Equals }

// GetGt returns FloatFilter.Gt, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetGt() *float64 { return v.Gt }

// GetGte returns FloatFilter.Gte, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetGte() *float64 { return v.Gte }

// GetIn returns FloatFilter.In, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetIn() []float64 { return v.In }

// GetLt returns FloatFilter.Lt, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetLt() *float64 { return v.Lt }

// GetLte returns FloatFilter.Lte, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetLte() *float64 { return v.Lte }

// GetNot returns FloatFilter.Not, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetNot() *NestedFloatFilter { return v.Not }

// GetNotIn returns FloatFilter.NotIn, and is useful for accessing the field via an interface.
func (v *FloatFilter) GetNotIn() []float64 { return v.NotIn }

type IntFilter struct {
	Equals *int             `json:"equals"`
	Gt     *int             `json:"gt"`
	Gte    *int             `json:"gte"`
	In     []int            `json:"in"`
	Lt     *int             `json:"lt"`
	Lte    *int             `json:"lte"`
	Not    *NestedIntFilter `json:"not,omitempty"`
	NotIn  []int            `json:"notIn"`
}

// GetEquals returns IntFilter.Equals, and is useful for accessing the field via an interface.
func (v *IntFilter) GetEquals() *int { return v.Equals }

// GetGt returns IntFilter.Gt, and is useful for accessing the field via an interface.
func (v *IntFilter) GetGt() *int { return v.Gt }

// GetGte returns IntFilter.Gte, and is useful for accessing the field via an interface.
func (v *IntFilter) GetGte() *int { return v.Gte }

// GetIn returns IntFilter.In, and is useful for accessing the field via an interface.
func (v *IntFilter) GetIn() []int { return v.In }

// GetLt returns IntFilter.Lt, and is useful for accessing the field via an interface.
func (v *IntFilter) GetLt() *int { return v.Lt }

// GetLte returns IntFilter.Lte, and is useful for accessing the field via an interface.
func (v *IntFilter) GetLte() *int { return v.Lte }

// GetNot returns IntFilter.Not, and is useful for accessing the field via an interface.
func (v *IntFilter) GetNot() *NestedIntFilter { return v.Not }

// GetNotIn returns IntFilter.NotIn, and is useful for accessing the field via an interface.
func (v *IntFilter) GetNotIn() []int { return v.NotIn }

type InvoiceDiscountListRelationFilter struct {
	Every *InvoiceDiscountWhereInput `json:"every,omitempty"`
	None  *InvoiceDiscountWhereInput `json:"none,omitempty"`
	Some  *InvoiceDiscountWhereInput `json:"some,omitempty"`
}

// GetEvery returns InvoiceDiscountListRelationFilter.Every, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountListRelationFilter) GetEvery() *InvoiceDiscountWhereInput { return v.Every }

// GetNone returns InvoiceDiscountListRelationFilter.None, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountListRelationFilter) GetNone() *InvoiceDiscountWhereInput { return v.None }

// GetSome returns InvoiceDiscountListRelationFilter.Some, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountListRelationFilter) GetSome() *InvoiceDiscountWhereInput { return v.Some }

type InvoiceDiscountOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count"`
}

// GetCount returns InvoiceDiscountOrderByRelationAggregateInput.Count, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountOrderByRelationAggregateInput) GetCount() *SortOrder { return v.Count }

type InvoiceDiscountWhereInput struct {
	Invoice   *InvoiceRelationFilter       `json:"invoice,omitempty"`
	InvoiceId *IntFilter                   `json:"invoiceId,omitempty"`
	Name      *StringFilter                `json:"name,omitempty"`
	Amount    *FloatFilter                 `json:"amount,omitempty"`
	CreatedAt *DateTimeFilter              `json:"createdAt,omitempty"`
	Id        *IntFilter                   `json:"id,omitempty"`
	UpdatedAt *DateTimeFilter              `json:"updatedAt,omitempty"`
	AND       []*InvoiceDiscountWhereInput `json:"AND,omitempty"`
	NOT       []*InvoiceDiscountWhereInput `json:"NOT,omitempty"`
	OR        []*InvoiceDiscountWhereInput `json:"OR,omitempty"`
}

// GetAND returns InvoiceDiscountWhereInput.AND, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountWhereInput) GetAND() []*InvoiceDiscountWhereInput { return v.AND }

// GetNOT returns InvoiceDiscountWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountWhereInput) GetNOT() []*InvoiceDiscountWhereInput { return v.NOT }

// GetOR returns InvoiceDiscountWhereInput.OR, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountWhereInput) GetOR() []*InvoiceDiscountWhereInput { return v.OR }

// GetAmount returns InvoiceDiscountWhereInput.Amount, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountWhereInput) GetAmount() *FloatFilter { return v.Amount }

// GetCreatedAt returns InvoiceDiscountWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetId returns InvoiceDiscountWhereInput.Id, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountWhereInput) GetId() *IntFilter { return v.Id }

// GetInvoice returns InvoiceDiscountWhereInput.Invoice, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountWhereInput) GetInvoice() *InvoiceRelationFilter { return v.Invoice }

// GetInvoiceId returns InvoiceDiscountWhereInput.InvoiceId, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountWhereInput) GetInvoiceId() *IntFilter { return v.InvoiceId }

// GetName returns InvoiceDiscountWhereInput.Name, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountWhereInput) GetName() *StringFilter { return v.Name }

// GetUpdatedAt returns InvoiceDiscountWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceDiscountWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

type InvoiceItemListRelationFilter struct {
	Every *InvoiceItemWhereInput `json:"every,omitempty"`
	None  *InvoiceItemWhereInput `json:"none,omitempty"`
	Some  *InvoiceItemWhereInput `json:"some,omitempty"`
}

// GetEvery returns InvoiceItemListRelationFilter.Every, and is useful for accessing the field via an interface.
func (v *InvoiceItemListRelationFilter) GetEvery() *InvoiceItemWhereInput { return v.Every }

// GetNone returns InvoiceItemListRelationFilter.None, and is useful for accessing the field via an interface.
func (v *InvoiceItemListRelationFilter) GetNone() *InvoiceItemWhereInput { return v.None }

// GetSome returns InvoiceItemListRelationFilter.Some, and is useful for accessing the field via an interface.
func (v *InvoiceItemListRelationFilter) GetSome() *InvoiceItemWhereInput { return v.Some }

type InvoiceItemOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count"`
}

// GetCount returns InvoiceItemOrderByRelationAggregateInput.Count, and is useful for accessing the field via an interface.
func (v *InvoiceItemOrderByRelationAggregateInput) GetCount() *SortOrder { return v.Count }

type InvoiceItemWhereInput struct {
	InvoiceId *IntFilter               `json:"invoiceId,omitempty"`
	Name      *StringFilter            `json:"name,omitempty"`
	Price     *FloatFilter             `json:"price,omitempty"`
	CreatedAt *DateTimeFilter          `json:"createdAt,omitempty"`
	Id        *IntFilter               `json:"id,omitempty"`
	Invoice   *InvoiceRelationFilter   `json:"invoice,omitempty"`
	Quantity  *IntFilter               `json:"quantity,omitempty"`
	UpdatedAt *DateTimeFilter          `json:"updatedAt,omitempty"`
	AND       []*InvoiceItemWhereInput `json:"AND,omitempty"`
	NOT       []*InvoiceItemWhereInput `json:"NOT,omitempty"`
	OR        []*InvoiceItemWhereInput `json:"OR,omitempty"`
}

// GetAND returns InvoiceItemWhereInput.AND, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetAND() []*InvoiceItemWhereInput { return v.AND }

// GetNOT returns InvoiceItemWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetNOT() []*InvoiceItemWhereInput { return v.NOT }

// GetOR returns InvoiceItemWhereInput.OR, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetOR() []*InvoiceItemWhereInput { return v.OR }

// GetCreatedAt returns InvoiceItemWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetId returns InvoiceItemWhereInput.Id, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetId() *IntFilter { return v.Id }

// GetInvoice returns InvoiceItemWhereInput.Invoice, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetInvoice() *InvoiceRelationFilter { return v.Invoice }

// GetInvoiceId returns InvoiceItemWhereInput.InvoiceId, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetInvoiceId() *IntFilter { return v.InvoiceId }

// GetName returns InvoiceItemWhereInput.Name, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetName() *StringFilter { return v.Name }

// GetPrice returns InvoiceItemWhereInput.Price, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetPrice() *FloatFilter { return v.Price }

// GetQuantity returns InvoiceItemWhereInput.Quantity, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetQuantity() *IntFilter { return v.Quantity }

// GetUpdatedAt returns InvoiceItemWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceItemWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

type InvoiceOrderByWithRelationInput struct {
	InvoiceDiscount *InvoiceDiscountOrderByRelationAggregateInput `json:"InvoiceDiscount,omitempty"`
	Appointment     *AppointmentOrderByWithRelationInput          `json:"appointment,omitempty"`
	AppointmentId   *SortOrder                                    `json:"appointmentId"`
	CreatedAt       *SortOrder                                    `json:"createdAt"`
	Id              *SortOrder                                    `json:"id"`
	InvoiceItems    *InvoiceItemOrderByRelationAggregateInput     `json:"invoiceItems,omitempty"`
	Paid            *SortOrder                                    `json:"paid"`
	Total           *SortOrder                                    `json:"total"`
	UpdatedAt       *SortOrder                                    `json:"updatedAt"`
}

// GetInvoiceDiscount returns InvoiceOrderByWithRelationInput.InvoiceDiscount, and is useful for accessing the field via an interface.
func (v *InvoiceOrderByWithRelationInput) GetInvoiceDiscount() *InvoiceDiscountOrderByRelationAggregateInput {
	return v.InvoiceDiscount
}

// GetAppointment returns InvoiceOrderByWithRelationInput.Appointment, and is useful for accessing the field via an interface.
func (v *InvoiceOrderByWithRelationInput) GetAppointment() *AppointmentOrderByWithRelationInput {
	return v.Appointment
}

// GetAppointmentId returns InvoiceOrderByWithRelationInput.AppointmentId, and is useful for accessing the field via an interface.
func (v *InvoiceOrderByWithRelationInput) GetAppointmentId() *SortOrder { return v.AppointmentId }

// GetCreatedAt returns InvoiceOrderByWithRelationInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceOrderByWithRelationInput) GetCreatedAt() *SortOrder { return v.CreatedAt }

// GetId returns InvoiceOrderByWithRelationInput.Id, and is useful for accessing the field via an interface.
func (v *InvoiceOrderByWithRelationInput) GetId() *SortOrder { return v.Id }

// GetInvoiceItems returns InvoiceOrderByWithRelationInput.InvoiceItems, and is useful for accessing the field via an interface.
func (v *InvoiceOrderByWithRelationInput) GetInvoiceItems() *InvoiceItemOrderByRelationAggregateInput {
	return v.InvoiceItems
}

// GetPaid returns InvoiceOrderByWithRelationInput.Paid, and is useful for accessing the field via an interface.
func (v *InvoiceOrderByWithRelationInput) GetPaid() *SortOrder { return v.Paid }

// GetTotal returns InvoiceOrderByWithRelationInput.Total, and is useful for accessing the field via an interface.
func (v *InvoiceOrderByWithRelationInput) GetTotal() *SortOrder { return v.Total }

// GetUpdatedAt returns InvoiceOrderByWithRelationInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceOrderByWithRelationInput) GetUpdatedAt() *SortOrder { return v.UpdatedAt }

type InvoiceRelationFilter struct {
	Is    *InvoiceWhereInput `json:"is,omitempty"`
	IsNot *InvoiceWhereInput `json:"isNot,omitempty"`
}

// GetIs returns InvoiceRelationFilter.Is, and is useful for accessing the field via an interface.
func (v *InvoiceRelationFilter) GetIs() *InvoiceWhereInput { return v.Is }

// GetIsNot returns InvoiceRelationFilter.IsNot, and is useful for accessing the field via an interface.
func (v *InvoiceRelationFilter) GetIsNot() *InvoiceWhereInput { return v.IsNot }

type InvoiceWhereInput struct {
	CreatedAt       *DateTimeFilter                    `json:"createdAt,omitempty"`
	InvoiceDiscount *InvoiceDiscountListRelationFilter `json:"InvoiceDiscount,omitempty"`
	InvoiceItems    *InvoiceItemListRelationFilter     `json:"invoiceItems,omitempty"`
	Paid            *BoolFilter                        `json:"paid,omitempty"`
	Appointment     *AppointmentRelationFilter         `json:"appointment,omitempty"`
	AppointmentId   *IntFilter                         `json:"appointmentId,omitempty"`
	Id              *IntFilter                         `json:"id,omitempty"`
	Total           *FloatFilter                       `json:"total,omitempty"`
	UpdatedAt       *DateTimeFilter                    `json:"updatedAt,omitempty"`
	AND             []*InvoiceWhereInput               `json:"AND,omitempty"`
	NOT             []*InvoiceWhereInput               `json:"NOT,omitempty"`
	OR              []*InvoiceWhereInput               `json:"OR,omitempty"`
}

// GetAND returns InvoiceWhereInput.AND, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetAND() []*InvoiceWhereInput { return v.AND }

// GetInvoiceDiscount returns InvoiceWhereInput.InvoiceDiscount, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetInvoiceDiscount() *InvoiceDiscountListRelationFilter {
	return v.InvoiceDiscount
}

// GetNOT returns InvoiceWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetNOT() []*InvoiceWhereInput { return v.NOT }

// GetOR returns InvoiceWhereInput.OR, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetOR() []*InvoiceWhereInput { return v.OR }

// GetAppointment returns InvoiceWhereInput.Appointment, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetAppointment() *AppointmentRelationFilter { return v.Appointment }

// GetAppointmentId returns InvoiceWhereInput.AppointmentId, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetAppointmentId() *IntFilter { return v.AppointmentId }

// GetCreatedAt returns InvoiceWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetId returns InvoiceWhereInput.Id, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetId() *IntFilter { return v.Id }

// GetInvoiceItems returns InvoiceWhereInput.InvoiceItems, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetInvoiceItems() *InvoiceItemListRelationFilter { return v.InvoiceItems }

// GetPaid returns InvoiceWhereInput.Paid, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetPaid() *BoolFilter { return v.Paid }

// GetTotal returns InvoiceWhereInput.Total, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetTotal() *FloatFilter { return v.Total }

// GetUpdatedAt returns InvoiceWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *InvoiceWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

type MedicineRelationFilter struct {
	Is    *MedicineWhereInput `json:"is,omitempty"`
	IsNot *MedicineWhereInput `json:"isNot,omitempty"`
}

// GetIs returns MedicineRelationFilter.Is, and is useful for accessing the field via an interface.
func (v *MedicineRelationFilter) GetIs() *MedicineWhereInput { return v.Is }

// GetIsNot returns MedicineRelationFilter.IsNot, and is useful for accessing the field via an interface.
func (v *MedicineRelationFilter) GetIsNot() *MedicineWhereInput { return v.IsNot }

type MedicineWhereInput struct {
	Name          *StringFilter                   `json:"name,omitempty"`
	PictureURL    *StringFilter                   `json:"pictureURL,omitempty"`
	Prescriptions *PrescriptionListRelationFilter `json:"prescriptions,omitempty"`
	CreatedAt     *DateTimeFilter                 `json:"createdAt,omitempty"`
	Description   *StringFilter                   `json:"description,omitempty"`
	Id            *IntFilter                      `json:"id,omitempty"`
	UpdatedAt     *DateTimeFilter                 `json:"updatedAt,omitempty"`
	AND           []*MedicineWhereInput           `json:"AND,omitempty"`
	NOT           []*MedicineWhereInput           `json:"NOT,omitempty"`
	OR            []*MedicineWhereInput           `json:"OR,omitempty"`
}

// GetAND returns MedicineWhereInput.AND, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetAND() []*MedicineWhereInput { return v.AND }

// GetNOT returns MedicineWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetNOT() []*MedicineWhereInput { return v.NOT }

// GetOR returns MedicineWhereInput.OR, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetOR() []*MedicineWhereInput { return v.OR }

// GetCreatedAt returns MedicineWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetDescription returns MedicineWhereInput.Description, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetDescription() *StringFilter { return v.Description }

// GetId returns MedicineWhereInput.Id, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetId() *IntFilter { return v.Id }

// GetName returns MedicineWhereInput.Name, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetName() *StringFilter { return v.Name }

// GetPictureURL returns MedicineWhereInput.PictureURL, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetPictureURL() *StringFilter { return v.PictureURL }

// GetPrescriptions returns MedicineWhereInput.Prescriptions, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetPrescriptions() *PrescriptionListRelationFilter {
	return v.Prescriptions
}

// GetUpdatedAt returns MedicineWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *MedicineWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

type NestedBoolFilter struct {
	Equals *bool             `json:"equals"`
	Not    *NestedBoolFilter `json:"not,omitempty"`
}

// GetEquals returns NestedBoolFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedBoolFilter) GetEquals() *bool { return v.Equals }

// GetNot returns NestedBoolFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedBoolFilter) GetNot() *NestedBoolFilter { return v.Not }

type NestedDateTimeFilter struct {
	Equals *time.Time            `json:"equals"`
	Gt     *time.Time            `json:"gt"`
	Gte    *time.Time            `json:"gte"`
	In     []time.Time           `json:"in"`
	Lt     *time.Time            `json:"lt"`
	Lte    *time.Time            `json:"lte"`
	Not    *NestedDateTimeFilter `json:"not,omitempty"`
	NotIn  []time.Time           `json:"notIn"`
}

// GetEquals returns NestedDateTimeFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetEquals() *time.Time { return v.Equals }

// GetGt returns NestedDateTimeFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetGt() *time.Time { return v.Gt }

// GetGte returns NestedDateTimeFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetGte() *time.Time { return v.Gte }

// GetIn returns NestedDateTimeFilter.In, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetIn() []time.Time { return v.In }

// GetLt returns NestedDateTimeFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetLt() *time.Time { return v.Lt }

// GetLte returns NestedDateTimeFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetLte() *time.Time { return v.Lte }

// GetNot returns NestedDateTimeFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetNot() *NestedDateTimeFilter { return v.Not }

// GetNotIn returns NestedDateTimeFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedDateTimeFilter) GetNotIn() []time.Time { return v.NotIn }

type NestedDateTimeNullableFilter struct {
	Equals *time.Time                    `json:"equals"`
	Gt     *time.Time                    `json:"gt"`
	Gte    *time.Time                    `json:"gte"`
	In     []time.Time                   `json:"in"`
	Lt     *time.Time                    `json:"lt"`
	Lte    *time.Time                    `json:"lte"`
	Not    *NestedDateTimeNullableFilter `json:"not,omitempty"`
	NotIn  []time.Time                   `json:"notIn"`
}

// GetEquals returns NestedDateTimeNullableFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetEquals() *time.Time { return v.Equals }

// GetGt returns NestedDateTimeNullableFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetGt() *time.Time { return v.Gt }

// GetGte returns NestedDateTimeNullableFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetGte() *time.Time { return v.Gte }

// GetIn returns NestedDateTimeNullableFilter.In, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetIn() []time.Time { return v.In }

// GetLt returns NestedDateTimeNullableFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetLt() *time.Time { return v.Lt }

// GetLte returns NestedDateTimeNullableFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetLte() *time.Time { return v.Lte }

// GetNot returns NestedDateTimeNullableFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetNot() *NestedDateTimeNullableFilter { return v.Not }

// GetNotIn returns NestedDateTimeNullableFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedDateTimeNullableFilter) GetNotIn() []time.Time { return v.NotIn }

type NestedEnumAppointmentStatusFilter struct {
	Equals *AppointmentStatus                 `json:"equals"`
	In     []AppointmentStatus                `json:"in"`
	Not    *NestedEnumAppointmentStatusFilter `json:"not,omitempty"`
	NotIn  []AppointmentStatus                `json:"notIn"`
}

// GetEquals returns NestedEnumAppointmentStatusFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedEnumAppointmentStatusFilter) GetEquals() *AppointmentStatus { return v.Equals }

// GetIn returns NestedEnumAppointmentStatusFilter.In, and is useful for accessing the field via an interface.
func (v *NestedEnumAppointmentStatusFilter) GetIn() []AppointmentStatus { return v.In }

// GetNot returns NestedEnumAppointmentStatusFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedEnumAppointmentStatusFilter) GetNot() *NestedEnumAppointmentStatusFilter { return v.Not }

// GetNotIn returns NestedEnumAppointmentStatusFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedEnumAppointmentStatusFilter) GetNotIn() []AppointmentStatus { return v.NotIn }

type NestedEnumBloodTypeFilter struct {
	Equals *BloodType                 `json:"equals"`
	In     []BloodType                `json:"in"`
	Not    *NestedEnumBloodTypeFilter `json:"not,omitempty"`
	NotIn  []BloodType                `json:"notIn"`
}

// GetEquals returns NestedEnumBloodTypeFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedEnumBloodTypeFilter) GetEquals() *BloodType { return v.Equals }

// GetIn returns NestedEnumBloodTypeFilter.In, and is useful for accessing the field via an interface.
func (v *NestedEnumBloodTypeFilter) GetIn() []BloodType { return v.In }

// GetNot returns NestedEnumBloodTypeFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedEnumBloodTypeFilter) GetNot() *NestedEnumBloodTypeFilter { return v.Not }

// GetNotIn returns NestedEnumBloodTypeFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedEnumBloodTypeFilter) GetNotIn() []BloodType { return v.NotIn }

type NestedFloatFilter struct {
	Equals *float64           `json:"equals"`
	Gt     *float64           `json:"gt"`
	Gte    *float64           `json:"gte"`
	In     []float64          `json:"in"`
	Lt     *float64           `json:"lt"`
	Lte    *float64           `json:"lte"`
	Not    *NestedFloatFilter `json:"not,omitempty"`
	NotIn  []float64          `json:"notIn"`
}

// GetEquals returns NestedFloatFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetEquals() *float64 { return v.Equals }

// GetGt returns NestedFloatFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetGt() *float64 { return v.Gt }

// GetGte returns NestedFloatFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetGte() *float64 { return v.Gte }

// GetIn returns NestedFloatFilter.In, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetIn() []float64 { return v.In }

// GetLt returns NestedFloatFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetLt() *float64 { return v.Lt }

// GetLte returns NestedFloatFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetLte() *float64 { return v.Lte }

// GetNot returns NestedFloatFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetNot() *NestedFloatFilter { return v.Not }

// GetNotIn returns NestedFloatFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedFloatFilter) GetNotIn() []float64 { return v.NotIn }

type NestedIntFilter struct {
	Equals *int             `json:"equals"`
	Gt     *int             `json:"gt"`
	Gte    *int             `json:"gte"`
	In     []int            `json:"in"`
	Lt     *int             `json:"lt"`
	Lte    *int             `json:"lte"`
	Not    *NestedIntFilter `json:"not,omitempty"`
	NotIn  []int            `json:"notIn"`
}

// GetEquals returns NestedIntFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetEquals() *int { return v.Equals }

// GetGt returns NestedIntFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetGt() *int { return v.Gt }

// GetGte returns NestedIntFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetGte() *int { return v.Gte }

// GetIn returns NestedIntFilter.In, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetIn() []int { return v.In }

// GetLt returns NestedIntFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetLt() *int { return v.Lt }

// GetLte returns NestedIntFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetLte() *int { return v.Lte }

// GetNot returns NestedIntFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetNot() *NestedIntFilter { return v.Not }

// GetNotIn returns NestedIntFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedIntFilter) GetNotIn() []int { return v.NotIn }

type NestedStringFilter struct {
	Contains   *string             `json:"contains"`
	EndsWith   *string             `json:"endsWith"`
	Equals     *string             `json:"equals"`
	Gt         *string             `json:"gt"`
	Gte        *string             `json:"gte"`
	Lt         *string             `json:"lt"`
	Lte        *string             `json:"lte"`
	Not        *NestedStringFilter `json:"not,omitempty"`
	StartsWith *string             `json:"startsWith"`
	In         []string            `json:"in"`
	NotIn      []string            `json:"notIn"`
}

// GetContains returns NestedStringFilter.Contains, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetContains() *string { return v.Contains }

// GetEndsWith returns NestedStringFilter.EndsWith, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetEndsWith() *string { return v.EndsWith }

// GetEquals returns NestedStringFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetEquals() *string { return v.Equals }

// GetGt returns NestedStringFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetGt() *string { return v.Gt }

// GetGte returns NestedStringFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetGte() *string { return v.Gte }

// GetIn returns NestedStringFilter.In, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetIn() []string { return v.In }

// GetLt returns NestedStringFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetLt() *string { return v.Lt }

// GetLte returns NestedStringFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetLte() *string { return v.Lte }

// GetNot returns NestedStringFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetNot() *NestedStringFilter { return v.Not }

// GetNotIn returns NestedStringFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetNotIn() []string { return v.NotIn }

// GetStartsWith returns NestedStringFilter.StartsWith, and is useful for accessing the field via an interface.
func (v *NestedStringFilter) GetStartsWith() *string { return v.StartsWith }

type NestedStringNullableFilter struct {
	Contains   *string                     `json:"contains"`
	EndsWith   *string                     `json:"endsWith"`
	Equals     *string                     `json:"equals"`
	Gt         *string                     `json:"gt"`
	Gte        *string                     `json:"gte"`
	Lt         *string                     `json:"lt"`
	Lte        *string                     `json:"lte"`
	Not        *NestedStringNullableFilter `json:"not,omitempty"`
	StartsWith *string                     `json:"startsWith"`
	In         []string                    `json:"in"`
	NotIn      []string                    `json:"notIn"`
}

// GetContains returns NestedStringNullableFilter.Contains, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetContains() *string { return v.Contains }

// GetEndsWith returns NestedStringNullableFilter.EndsWith, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetEndsWith() *string { return v.EndsWith }

// GetEquals returns NestedStringNullableFilter.Equals, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetEquals() *string { return v.Equals }

// GetGt returns NestedStringNullableFilter.Gt, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetGt() *string { return v.Gt }

// GetGte returns NestedStringNullableFilter.Gte, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetGte() *string { return v.Gte }

// GetIn returns NestedStringNullableFilter.In, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetIn() []string { return v.In }

// GetLt returns NestedStringNullableFilter.Lt, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetLt() *string { return v.Lt }

// GetLte returns NestedStringNullableFilter.Lte, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetLte() *string { return v.Lte }

// GetNot returns NestedStringNullableFilter.Not, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetNot() *NestedStringNullableFilter { return v.Not }

// GetNotIn returns NestedStringNullableFilter.NotIn, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetNotIn() []string { return v.NotIn }

// GetStartsWith returns NestedStringNullableFilter.StartsWith, and is useful for accessing the field via an interface.
func (v *NestedStringNullableFilter) GetStartsWith() *string { return v.StartsWith }

type PatientOrderByWithRelationInput struct {
	Appointments  *AppointmentOrderByRelationAggregateInput `json:"appointments,omitempty"`
	BirthDate     *SortOrder                                `json:"birthDate"`
	BloodType     *SortOrder                                `json:"bloodType"`
	CreatedAt     *SortOrder                                `json:"createdAt"`
	Firstname_en  *SortOrder                                `json:"firstname_en"`
	Firstname_th  *SortOrder                                `json:"firstname_th"`
	Height        *SortOrder                                `json:"height"`
	Id            *SortOrder                                `json:"id"`
	Initial_en    *SortOrder                                `json:"initial_en"`
	Initial_th    *SortOrder                                `json:"initial_th"`
	Lastname_en   *SortOrder                                `json:"lastname_en"`
	Lastname_th   *SortOrder                                `json:"lastname_th"`
	NationalId    *SortOrder                                `json:"nationalId"`
	Nationality   *SortOrder                                `json:"nationality"`
	PassportId    *SortOrder                                `json:"passportId"`
	PhoneNumber   *SortOrder                                `json:"phoneNumber"`
	ProfilePicURL *SortOrder                                `json:"profilePicURL"`
	UpdatedAt     *SortOrder                                `json:"updatedAt"`
	Weight        *SortOrder                                `json:"weight"`
}

// GetAppointments returns PatientOrderByWithRelationInput.Appointments, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetAppointments() *AppointmentOrderByRelationAggregateInput {
	return v.Appointments
}

// GetBirthDate returns PatientOrderByWithRelationInput.BirthDate, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetBirthDate() *SortOrder { return v.BirthDate }

// GetBloodType returns PatientOrderByWithRelationInput.BloodType, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetBloodType() *SortOrder { return v.BloodType }

// GetCreatedAt returns PatientOrderByWithRelationInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetCreatedAt() *SortOrder { return v.CreatedAt }

// GetFirstname_en returns PatientOrderByWithRelationInput.Firstname_en, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetFirstname_en() *SortOrder { return v.Firstname_en }

// GetFirstname_th returns PatientOrderByWithRelationInput.Firstname_th, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetFirstname_th() *SortOrder { return v.Firstname_th }

// GetHeight returns PatientOrderByWithRelationInput.Height, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetHeight() *SortOrder { return v.Height }

// GetId returns PatientOrderByWithRelationInput.Id, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetId() *SortOrder { return v.Id }

// GetInitial_en returns PatientOrderByWithRelationInput.Initial_en, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetInitial_en() *SortOrder { return v.Initial_en }

// GetInitial_th returns PatientOrderByWithRelationInput.Initial_th, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetInitial_th() *SortOrder { return v.Initial_th }

// GetLastname_en returns PatientOrderByWithRelationInput.Lastname_en, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetLastname_en() *SortOrder { return v.Lastname_en }

// GetLastname_th returns PatientOrderByWithRelationInput.Lastname_th, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetLastname_th() *SortOrder { return v.Lastname_th }

// GetNationalId returns PatientOrderByWithRelationInput.NationalId, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetNationalId() *SortOrder { return v.NationalId }

// GetNationality returns PatientOrderByWithRelationInput.Nationality, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetNationality() *SortOrder { return v.Nationality }

// GetPassportId returns PatientOrderByWithRelationInput.PassportId, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetPassportId() *SortOrder { return v.PassportId }

// GetPhoneNumber returns PatientOrderByWithRelationInput.PhoneNumber, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetPhoneNumber() *SortOrder { return v.PhoneNumber }

// GetProfilePicURL returns PatientOrderByWithRelationInput.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetProfilePicURL() *SortOrder { return v.ProfilePicURL }

// GetUpdatedAt returns PatientOrderByWithRelationInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetUpdatedAt() *SortOrder { return v.UpdatedAt }

// GetWeight returns PatientOrderByWithRelationInput.Weight, and is useful for accessing the field via an interface.
func (v *PatientOrderByWithRelationInput) GetWeight() *SortOrder { return v.Weight }

type PatientRelationFilter struct {
	Is    *PatientWhereInput `json:"is,omitempty"`
	IsNot *PatientWhereInput `json:"isNot,omitempty"`
}

// GetIs returns PatientRelationFilter.Is, and is useful for accessing the field via an interface.
func (v *PatientRelationFilter) GetIs() *PatientWhereInput { return v.Is }

// GetIsNot returns PatientRelationFilter.IsNot, and is useful for accessing the field via an interface.
func (v *PatientRelationFilter) GetIsNot() *PatientWhereInput { return v.IsNot }

type PatientWhereInput struct {
	Weight        *FloatFilter                   `json:"weight,omitempty"`
	UpdatedAt     *DateTimeFilter                `json:"updatedAt,omitempty"`
	ProfilePicURL *StringFilter                  `json:"profilePicURL,omitempty"`
	Appointments  *AppointmentListRelationFilter `json:"appointments,omitempty"`
	BirthDate     *DateTimeFilter                `json:"birthDate,omitempty"`
	BloodType     *EnumBloodTypeFilter           `json:"bloodType,omitempty"`
	CreatedAt     *DateTimeFilter                `json:"createdAt,omitempty"`
	Firstname_en  *StringFilter                  `json:"firstname_en,omitempty"`
	Firstname_th  *StringFilter                  `json:"firstname_th,omitempty"`
	Height        *FloatFilter                   `json:"height,omitempty"`
	Id            *StringFilter                  `json:"id,omitempty"`
	Initial_en    *StringFilter                  `json:"initial_en,omitempty"`
	Initial_th    *StringFilter                  `json:"initial_th,omitempty"`
	Lastname_en   *StringFilter                  `json:"lastname_en,omitempty"`
	Lastname_th   *StringFilter                  `json:"lastname_th,omitempty"`
	NationalId    *StringNullableFilter          `json:"nationalId,omitempty"`
	Nationality   *StringFilter                  `json:"nationality,omitempty"`
	PassportId    *StringNullableFilter          `json:"passportId,omitempty"`
	PhoneNumber   *StringFilter                  `json:"phoneNumber,omitempty"`
	OR            []*PatientWhereInput           `json:"OR,omitempty"`
	NOT           []*PatientWhereInput           `json:"NOT,omitempty"`
	AND           []*PatientWhereInput           `json:"AND,omitempty"`
}

// GetAND returns PatientWhereInput.AND, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetAND() []*PatientWhereInput { return v.AND }

// GetNOT returns PatientWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetNOT() []*PatientWhereInput { return v.NOT }

// GetOR returns PatientWhereInput.OR, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetOR() []*PatientWhereInput { return v.OR }

// GetAppointments returns PatientWhereInput.Appointments, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetAppointments() *AppointmentListRelationFilter { return v.Appointments }

// GetBirthDate returns PatientWhereInput.BirthDate, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetBirthDate() *DateTimeFilter { return v.BirthDate }

// GetBloodType returns PatientWhereInput.BloodType, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetBloodType() *EnumBloodTypeFilter { return v.BloodType }

// GetCreatedAt returns PatientWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetFirstname_en returns PatientWhereInput.Firstname_en, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetFirstname_en() *StringFilter { return v.Firstname_en }

// GetFirstname_th returns PatientWhereInput.Firstname_th, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetFirstname_th() *StringFilter { return v.Firstname_th }

// GetHeight returns PatientWhereInput.Height, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetHeight() *FloatFilter { return v.Height }

// GetId returns PatientWhereInput.Id, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetId() *StringFilter { return v.Id }

// GetInitial_en returns PatientWhereInput.Initial_en, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetInitial_en() *StringFilter { return v.Initial_en }

// GetInitial_th returns PatientWhereInput.Initial_th, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetInitial_th() *StringFilter { return v.Initial_th }

// GetLastname_en returns PatientWhereInput.Lastname_en, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetLastname_en() *StringFilter { return v.Lastname_en }

// GetLastname_th returns PatientWhereInput.Lastname_th, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetLastname_th() *StringFilter { return v.Lastname_th }

// GetNationalId returns PatientWhereInput.NationalId, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetNationalId() *StringNullableFilter { return v.NationalId }

// GetNationality returns PatientWhereInput.Nationality, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetNationality() *StringFilter { return v.Nationality }

// GetPassportId returns PatientWhereInput.PassportId, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetPassportId() *StringNullableFilter { return v.PassportId }

// GetPhoneNumber returns PatientWhereInput.PhoneNumber, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetPhoneNumber() *StringFilter { return v.PhoneNumber }

// GetProfilePicURL returns PatientWhereInput.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetProfilePicURL() *StringFilter { return v.ProfilePicURL }

// GetUpdatedAt returns PatientWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

// GetWeight returns PatientWhereInput.Weight, and is useful for accessing the field via an interface.
func (v *PatientWhereInput) GetWeight() *FloatFilter { return v.Weight }

type PrescriptionListRelationFilter struct {
	Every *PrescriptionWhereInput `json:"every,omitempty"`
	None  *PrescriptionWhereInput `json:"none,omitempty"`
	Some  *PrescriptionWhereInput `json:"some,omitempty"`
}

// GetEvery returns PrescriptionListRelationFilter.Every, and is useful for accessing the field via an interface.
func (v *PrescriptionListRelationFilter) GetEvery() *PrescriptionWhereInput { return v.Every }

// GetNone returns PrescriptionListRelationFilter.None, and is useful for accessing the field via an interface.
func (v *PrescriptionListRelationFilter) GetNone() *PrescriptionWhereInput { return v.None }

// GetSome returns PrescriptionListRelationFilter.Some, and is useful for accessing the field via an interface.
func (v *PrescriptionListRelationFilter) GetSome() *PrescriptionWhereInput { return v.Some }

type PrescriptionOrderByRelationAggregateInput struct {
	Count *SortOrder `json:"_count"`
}

// GetCount returns PrescriptionOrderByRelationAggregateInput.Count, and is useful for accessing the field via an interface.
func (v *PrescriptionOrderByRelationAggregateInput) GetCount() *SortOrder { return v.Count }

type PrescriptionWhereInput struct {
	CreatedAt     *DateTimeFilter            `json:"createdAt,omitempty"`
	Id            *IntFilter                 `json:"id,omitempty"`
	Medicine      *MedicineRelationFilter    `json:"medicine,omitempty"`
	Amount        *IntFilter                 `json:"amount,omitempty"`
	Appointment   *AppointmentRelationFilter `json:"appointment,omitempty"`
	AppointmentId *IntFilter                 `json:"appointmentId,omitempty"`
	MedicineId    *IntFilter                 `json:"medicineId,omitempty"`
	UpdatedAt     *DateTimeFilter            `json:"updatedAt,omitempty"`
	AND           []*PrescriptionWhereInput  `json:"AND,omitempty"`
	NOT           []*PrescriptionWhereInput  `json:"NOT,omitempty"`
	OR            []*PrescriptionWhereInput  `json:"OR,omitempty"`
}

// GetAND returns PrescriptionWhereInput.AND, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetAND() []*PrescriptionWhereInput { return v.AND }

// GetNOT returns PrescriptionWhereInput.NOT, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetNOT() []*PrescriptionWhereInput { return v.NOT }

// GetOR returns PrescriptionWhereInput.OR, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetOR() []*PrescriptionWhereInput { return v.OR }

// GetAmount returns PrescriptionWhereInput.Amount, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetAmount() *IntFilter { return v.Amount }

// GetAppointment returns PrescriptionWhereInput.Appointment, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetAppointment() *AppointmentRelationFilter { return v.Appointment }

// GetAppointmentId returns PrescriptionWhereInput.AppointmentId, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetAppointmentId() *IntFilter { return v.AppointmentId }

// GetCreatedAt returns PrescriptionWhereInput.CreatedAt, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetCreatedAt() *DateTimeFilter { return v.CreatedAt }

// GetId returns PrescriptionWhereInput.Id, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetId() *IntFilter { return v.Id }

// GetMedicine returns PrescriptionWhereInput.Medicine, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetMedicine() *MedicineRelationFilter { return v.Medicine }

// GetMedicineId returns PrescriptionWhereInput.MedicineId, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetMedicineId() *IntFilter { return v.MedicineId }

// GetUpdatedAt returns PrescriptionWhereInput.UpdatedAt, and is useful for accessing the field via an interface.
func (v *PrescriptionWhereInput) GetUpdatedAt() *DateTimeFilter { return v.UpdatedAt }

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type StringFilter struct {
	Contains   *string             `json:"contains"`
	EndsWith   *string             `json:"endsWith"`
	Equals     *string             `json:"equals"`
	Gt         *string             `json:"gt"`
	Gte        *string             `json:"gte"`
	StartsWith *string             `json:"startsWith"`
	Lt         *string             `json:"lt"`
	Lte        *string             `json:"lte"`
	Mode       *QueryMode          `json:"mode"`
	Not        *NestedStringFilter `json:"not,omitempty"`
	NotIn      []string            `json:"notIn"`
	In         []string            `json:"in"`
}

// GetContains returns StringFilter.Contains, and is useful for accessing the field via an interface.
func (v *StringFilter) GetContains() *string { return v.Contains }

// GetEndsWith returns StringFilter.EndsWith, and is useful for accessing the field via an interface.
func (v *StringFilter) GetEndsWith() *string { return v.EndsWith }

// GetEquals returns StringFilter.Equals, and is useful for accessing the field via an interface.
func (v *StringFilter) GetEquals() *string { return v.Equals }

// GetGt returns StringFilter.Gt, and is useful for accessing the field via an interface.
func (v *StringFilter) GetGt() *string { return v.Gt }

// GetGte returns StringFilter.Gte, and is useful for accessing the field via an interface.
func (v *StringFilter) GetGte() *string { return v.Gte }

// GetIn returns StringFilter.In, and is useful for accessing the field via an interface.
func (v *StringFilter) GetIn() []string { return v.In }

// GetLt returns StringFilter.Lt, and is useful for accessing the field via an interface.
func (v *StringFilter) GetLt() *string { return v.Lt }

// GetLte returns StringFilter.Lte, and is useful for accessing the field via an interface.
func (v *StringFilter) GetLte() *string { return v.Lte }

// GetMode returns StringFilter.Mode, and is useful for accessing the field via an interface.
func (v *StringFilter) GetMode() *QueryMode { return v.Mode }

// GetNot returns StringFilter.Not, and is useful for accessing the field via an interface.
func (v *StringFilter) GetNot() *NestedStringFilter { return v.Not }

// GetNotIn returns StringFilter.NotIn, and is useful for accessing the field via an interface.
func (v *StringFilter) GetNotIn() []string { return v.NotIn }

// GetStartsWith returns StringFilter.StartsWith, and is useful for accessing the field via an interface.
func (v *StringFilter) GetStartsWith() *string { return v.StartsWith }

type StringNullableFilter struct {
	Contains   *string                     `json:"contains"`
	EndsWith   *string                     `json:"endsWith"`
	Equals     *string                     `json:"equals"`
	Gt         *string                     `json:"gt"`
	Gte        *string                     `json:"gte"`
	StartsWith *string                     `json:"startsWith"`
	Lt         *string                     `json:"lt"`
	Lte        *string                     `json:"lte"`
	Mode       *QueryMode                  `json:"mode"`
	Not        *NestedStringNullableFilter `json:"not,omitempty"`
	NotIn      []string                    `json:"notIn"`
	In         []string                    `json:"in"`
}

// GetContains returns StringNullableFilter.Contains, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetContains() *string { return v.Contains }

// GetEndsWith returns StringNullableFilter.EndsWith, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetEndsWith() *string { return v.EndsWith }

// GetEquals returns StringNullableFilter.Equals, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetEquals() *string { return v.Equals }

// GetGt returns StringNullableFilter.Gt, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetGt() *string { return v.Gt }

// GetGte returns StringNullableFilter.Gte, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetGte() *string { return v.Gte }

// GetIn returns StringNullableFilter.In, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetIn() []string { return v.In }

// GetLt returns StringNullableFilter.Lt, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetLt() *string { return v.Lt }

// GetLte returns StringNullableFilter.Lte, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetLte() *string { return v.Lte }

// GetMode returns StringNullableFilter.Mode, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetMode() *QueryMode { return v.Mode }

// GetNot returns StringNullableFilter.Not, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetNot() *NestedStringNullableFilter { return v.Not }

// GetNotIn returns StringNullableFilter.NotIn, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetNotIn() []string { return v.NotIn }

// GetStartsWith returns StringNullableFilter.StartsWith, and is useful for accessing the field via an interface.
func (v *StringNullableFilter) GetStartsWith() *string { return v.StartsWith }

// __assertDoctorCredentialInput is used internally by genqlient
type __assertDoctorCredentialInput struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// GetPassword returns __assertDoctorCredentialInput.Password, and is useful for accessing the field via an interface.
func (v *__assertDoctorCredentialInput) GetPassword() string { return v.Password }

// GetUsername returns __assertDoctorCredentialInput.Username, and is useful for accessing the field via an interface.
func (v *__assertDoctorCredentialInput) GetUsername() string { return v.Username }

// __getAppointmentIdsInput is used internally by genqlient
type __getAppointmentIdsInput struct {
	Where *AppointmentWhereInput `json:"where,omitempty"`
}

// GetWhere returns __getAppointmentIdsInput.Where, and is useful for accessing the field via an interface.
func (v *__getAppointmentIdsInput) GetWhere() *AppointmentWhereInput { return v.Where }

// __getAppointmentInput is used internally by genqlient
type __getAppointmentInput struct {
	Where *AppointmentWhereInput `json:"where,omitempty"`
}

// GetWhere returns __getAppointmentInput.Where, and is useful for accessing the field via an interface.
func (v *__getAppointmentInput) GetWhere() *AppointmentWhereInput { return v.Where }

// __getAppointmentsInput is used internally by genqlient
type __getAppointmentsInput struct {
	Where   *AppointmentWhereInput                 `json:"where,omitempty"`
	OrderBy []*AppointmentOrderByWithRelationInput `json:"orderBy,omitempty"`
}

// GetWhere returns __getAppointmentsInput.Where, and is useful for accessing the field via an interface.
func (v *__getAppointmentsInput) GetWhere() *AppointmentWhereInput { return v.Where }

// GetOrderBy returns __getAppointmentsInput.OrderBy, and is useful for accessing the field via an interface.
func (v *__getAppointmentsInput) GetOrderBy() []*AppointmentOrderByWithRelationInput {
	return v.OrderBy
}

// __getAppointmentsWithPaginationInput is used internally by genqlient
type __getAppointmentsWithPaginationInput struct {
	Where   *AppointmentWhereInput                 `json:"where,omitempty"`
	Take    *int                                   `json:"take"`
	Skip    *int                                   `json:"skip"`
	OrderBy []*AppointmentOrderByWithRelationInput `json:"orderBy,omitempty"`
}

// GetWhere returns __getAppointmentsWithPaginationInput.Where, and is useful for accessing the field via an interface.
func (v *__getAppointmentsWithPaginationInput) GetWhere() *AppointmentWhereInput { return v.Where }

// GetOrderBy returns __getAppointmentsWithPaginationInput.OrderBy, and is useful for accessing the field via an interface.
func (v *__getAppointmentsWithPaginationInput) GetOrderBy() []*AppointmentOrderByWithRelationInput {
	return v.OrderBy
}

// GetTake returns __getAppointmentsWithPaginationInput.Take, and is useful for accessing the field via an interface.
func (v *__getAppointmentsWithPaginationInput) GetTake() *int { return v.Take }

// GetSkip returns __getAppointmentsWithPaginationInput.Skip, and is useful for accessing the field via an interface.
func (v *__getAppointmentsWithPaginationInput) GetSkip() *int { return v.Skip }

// __getDoctorAppointmentInput is used internally by genqlient
type __getDoctorAppointmentInput struct {
	Where *AppointmentWhereInput `json:"where,omitempty"`
}

// GetWhere returns __getDoctorAppointmentInput.Where, and is useful for accessing the field via an interface.
func (v *__getDoctorAppointmentInput) GetWhere() *AppointmentWhereInput { return v.Where }

// __getDoctorInput is used internally by genqlient
type __getDoctorInput struct {
	Where *DoctorWhereInput `json:"where,omitempty"`
}

// GetWhere returns __getDoctorInput.Where, and is useful for accessing the field via an interface.
func (v *__getDoctorInput) GetWhere() *DoctorWhereInput { return v.Where }

// __getInvoiceInput is used internally by genqlient
type __getInvoiceInput struct {
	Where *InvoiceWhereInput `json:"where,omitempty"`
}

// GetWhere returns __getInvoiceInput.Where, and is useful for accessing the field via an interface.
func (v *__getInvoiceInput) GetWhere() *InvoiceWhereInput { return v.Where }

// __getPatientInput is used internally by genqlient
type __getPatientInput struct {
	Where *PatientWhereInput `json:"where,omitempty"`
}

// GetWhere returns __getPatientInput.Where, and is useful for accessing the field via an interface.
func (v *__getPatientInput) GetWhere() *PatientWhereInput { return v.Where }

// __paidInvoiceInput is used internally by genqlient
type __paidInvoiceInput struct {
	PaidInvoiceId float64 `json:"paidInvoiceId"`
}

// GetPaidInvoiceId returns __paidInvoiceInput.PaidInvoiceId, and is useful for accessing the field via an interface.
func (v *__paidInvoiceInput) GetPaidInvoiceId() float64 { return v.PaidInvoiceId }

// __setAppointmentStatusInput is used internally by genqlient
type __setAppointmentStatusInput struct {
	Status                 AppointmentStatus `json:"status"`
	SetAppointmentStatusId float64           `json:"setAppointmentStatusId"`
}

// GetSetAppointmentStatusId returns __setAppointmentStatusInput.SetAppointmentStatusId, and is useful for accessing the field via an interface.
func (v *__setAppointmentStatusInput) GetSetAppointmentStatusId() float64 {
	return v.SetAppointmentStatusId
}

// GetStatus returns __setAppointmentStatusInput.Status, and is useful for accessing the field via an interface.
func (v *__setAppointmentStatusInput) GetStatus() AppointmentStatus { return v.Status }

// assertDoctorCredentialResponse is returned by assertDoctorCredential on success.
type assertDoctorCredentialResponse struct {
	AssertDoctorPassword bool `json:"assertDoctorPassword"`
}

// GetAssertDoctorPassword returns assertDoctorCredentialResponse.AssertDoctorPassword, and is useful for accessing the field via an interface.
func (v *assertDoctorCredentialResponse) GetAssertDoctorPassword() bool {
	return v.AssertDoctorPassword
}

// getAppointmentAppointment includes the requested fields of the GraphQL type Appointment.
type getAppointmentAppointment struct {
	Id              string                                                `json:"id"`
	PatientId       string                                                `json:"patientId"`
	StartDateTime   time.Time                                             `json:"startDateTime"`
	EndDateTime     time.Time                                             `json:"endDateTime"`
	Detail          string                                                `json:"detail"`
	Status          AppointmentStatus                                     `json:"status"`
	NextAppointment *time.Time                                            `json:"nextAppointment"`
	Doctor          *getAppointmentAppointmentDoctor                      `json:"doctor"`
	Invoice         *getAppointmentAppointmentInvoice                     `json:"invoice"`
	Prescriptions   []*getAppointmentAppointmentPrescriptionsPrescription `json:"prescriptions"`
}

// GetId returns getAppointmentAppointment.Id, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointment) GetId() string { return v.Id }

// GetPatientId returns getAppointmentAppointment.PatientId, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointment) GetPatientId() string { return v.PatientId }

// GetStartDateTime returns getAppointmentAppointment.StartDateTime, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointment) GetStartDateTime() time.Time { return v.StartDateTime }

// GetEndDateTime returns getAppointmentAppointment.EndDateTime, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointment) GetEndDateTime() time.Time { return v.EndDateTime }

// GetDetail returns getAppointmentAppointment.Detail, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointment) GetDetail() string { return v.Detail }

// GetStatus returns getAppointmentAppointment.Status, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointment) GetStatus() AppointmentStatus { return v.Status }

// GetNextAppointment returns getAppointmentAppointment.NextAppointment, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointment) GetNextAppointment() *time.Time { return v.NextAppointment }

// GetDoctor returns getAppointmentAppointment.Doctor, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointment) GetDoctor() *getAppointmentAppointmentDoctor { return v.Doctor }

// GetInvoice returns getAppointmentAppointment.Invoice, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointment) GetInvoice() *getAppointmentAppointmentInvoice { return v.Invoice }

// GetPrescriptions returns getAppointmentAppointment.Prescriptions, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointment) GetPrescriptions() []*getAppointmentAppointmentPrescriptionsPrescription {
	return v.Prescriptions
}

// getAppointmentAppointmentDoctor includes the requested fields of the GraphQL type Doctor.
type getAppointmentAppointmentDoctor struct {
	Id            string `json:"id"`
	Initial_en    string `json:"initial_en"`
	Firstname_en  string `json:"firstname_en"`
	Lastname_en   string `json:"lastname_en"`
	Position      string `json:"position"`
	ProfilePicURL string `json:"profilePicURL"`
}

// GetId returns getAppointmentAppointmentDoctor.Id, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentDoctor) GetId() string { return v.Id }

// GetInitial_en returns getAppointmentAppointmentDoctor.Initial_en, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentDoctor) GetInitial_en() string { return v.Initial_en }

// GetFirstname_en returns getAppointmentAppointmentDoctor.Firstname_en, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentDoctor) GetFirstname_en() string { return v.Firstname_en }

// GetLastname_en returns getAppointmentAppointmentDoctor.Lastname_en, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentDoctor) GetLastname_en() string { return v.Lastname_en }

// GetPosition returns getAppointmentAppointmentDoctor.Position, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentDoctor) GetPosition() string { return v.Position }

// GetProfilePicURL returns getAppointmentAppointmentDoctor.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentDoctor) GetProfilePicURL() string { return v.ProfilePicURL }

// getAppointmentAppointmentInvoice includes the requested fields of the GraphQL type Invoice.
type getAppointmentAppointmentInvoice struct {
	Id              string                                                     `json:"id"`
	InvoiceItems    []*getAppointmentAppointmentInvoiceInvoiceItemsInvoiceItem `json:"invoiceItems"`
	InvoiceDiscount []*getAppointmentAppointmentInvoiceInvoiceDiscount         `json:"InvoiceDiscount"`
	Total           float64                                                    `json:"total"`
	Paid            bool                                                       `json:"paid"`
}

// GetId returns getAppointmentAppointmentInvoice.Id, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentInvoice) GetId() string { return v.Id }

// GetTotal returns getAppointmentAppointmentInvoice.Total, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentInvoice) GetTotal() float64 { return v.Total }

// GetPaid returns getAppointmentAppointmentInvoice.Paid, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentInvoice) GetPaid() bool { return v.Paid }

// GetInvoiceItems returns getAppointmentAppointmentInvoice.InvoiceItems, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentInvoice) GetInvoiceItems() []*getAppointmentAppointmentInvoiceInvoiceItemsInvoiceItem {
	return v.InvoiceItems
}

// GetInvoiceDiscount returns getAppointmentAppointmentInvoice.InvoiceDiscount, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentInvoice) GetInvoiceDiscount() []*getAppointmentAppointmentInvoiceInvoiceDiscount {
	return v.InvoiceDiscount
}

// getAppointmentAppointmentInvoiceInvoiceDiscount includes the requested fields of the GraphQL type InvoiceDiscount.
type getAppointmentAppointmentInvoiceInvoiceDiscount struct {
	Id     string  `json:"id"`
	Name   string  `json:"name"`
	Amount float64 `json:"amount"`
}

// GetId returns getAppointmentAppointmentInvoiceInvoiceDiscount.Id, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentInvoiceInvoiceDiscount) GetId() string { return v.Id }

// GetName returns getAppointmentAppointmentInvoiceInvoiceDiscount.Name, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentInvoiceInvoiceDiscount) GetName() string { return v.Name }

// GetAmount returns getAppointmentAppointmentInvoiceInvoiceDiscount.Amount, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentInvoiceInvoiceDiscount) GetAmount() float64 { return v.Amount }

// getAppointmentAppointmentInvoiceInvoiceItemsInvoiceItem includes the requested fields of the GraphQL type InvoiceItem.
type getAppointmentAppointmentInvoiceInvoiceItemsInvoiceItem struct {
	Name     string  `json:"name"`
	Price    float64 `json:"price"`
	Quantity int     `json:"quantity"`
}

// GetName returns getAppointmentAppointmentInvoiceInvoiceItemsInvoiceItem.Name, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentInvoiceInvoiceItemsInvoiceItem) GetName() string { return v.Name }

// GetPrice returns getAppointmentAppointmentInvoiceInvoiceItemsInvoiceItem.Price, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentInvoiceInvoiceItemsInvoiceItem) GetPrice() float64 { return v.Price }

// GetQuantity returns getAppointmentAppointmentInvoiceInvoiceItemsInvoiceItem.Quantity, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentInvoiceInvoiceItemsInvoiceItem) GetQuantity() int {
	return v.Quantity
}

// getAppointmentAppointmentPrescriptionsPrescription includes the requested fields of the GraphQL type Prescription.
type getAppointmentAppointmentPrescriptionsPrescription struct {
	Medicine *getAppointmentAppointmentPrescriptionsPrescriptionMedicine `json:"medicine"`
	Amount   int                                                         `json:"amount"`
}

// GetAmount returns getAppointmentAppointmentPrescriptionsPrescription.Amount, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentPrescriptionsPrescription) GetAmount() int { return v.Amount }

// GetMedicine returns getAppointmentAppointmentPrescriptionsPrescription.Medicine, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentPrescriptionsPrescription) GetMedicine() *getAppointmentAppointmentPrescriptionsPrescriptionMedicine {
	return v.Medicine
}

// getAppointmentAppointmentPrescriptionsPrescriptionMedicine includes the requested fields of the GraphQL type Medicine.
type getAppointmentAppointmentPrescriptionsPrescriptionMedicine struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	PictureURL  string `json:"pictureURL"`
}

// GetName returns getAppointmentAppointmentPrescriptionsPrescriptionMedicine.Name, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentPrescriptionsPrescriptionMedicine) GetName() string { return v.Name }

// GetDescription returns getAppointmentAppointmentPrescriptionsPrescriptionMedicine.Description, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentPrescriptionsPrescriptionMedicine) GetDescription() string {
	return v.Description
}

// GetPictureURL returns getAppointmentAppointmentPrescriptionsPrescriptionMedicine.PictureURL, and is useful for accessing the field via an interface.
func (v *getAppointmentAppointmentPrescriptionsPrescriptionMedicine) GetPictureURL() string {
	return v.PictureURL
}

// getAppointmentIdsAppointmentsAppointment includes the requested fields of the GraphQL type Appointment.
type getAppointmentIdsAppointmentsAppointment struct {
	Id string `json:"id"`
}

// GetId returns getAppointmentIdsAppointmentsAppointment.Id, and is useful for accessing the field via an interface.
func (v *getAppointmentIdsAppointmentsAppointment) GetId() string { return v.Id }

// getAppointmentIdsResponse is returned by getAppointmentIds on success.
type getAppointmentIdsResponse struct {
	Appointments []*getAppointmentIdsAppointmentsAppointment `json:"appointments"`
}

// GetAppointments returns getAppointmentIdsResponse.Appointments, and is useful for accessing the field via an interface.
func (v *getAppointmentIdsResponse) GetAppointments() []*getAppointmentIdsAppointmentsAppointment {
	return v.Appointments
}

// getAppointmentResponse is returned by getAppointment on success.
type getAppointmentResponse struct {
	Appointment *getAppointmentAppointment `json:"appointment"`
}

// GetAppointment returns getAppointmentResponse.Appointment, and is useful for accessing the field via an interface.
func (v *getAppointmentResponse) GetAppointment() *getAppointmentAppointment { return v.Appointment }

// getAppointmentsAppointmentsAppointment includes the requested fields of the GraphQL type Appointment.
type getAppointmentsAppointmentsAppointment struct {
	StartDateTime time.Time                                      `json:"startDateTime"`
	EndDateTime   time.Time                                      `json:"endDateTime"`
	Patient       *getAppointmentsAppointmentsAppointmentPatient `json:"patient"`
	Doctor        *getAppointmentsAppointmentsAppointmentDoctor  `json:"doctor"`
	Status        AppointmentStatus                              `json:"status"`
	Detail        string                                         `json:"detail"`
	Id            string                                         `json:"id"`
}

// GetId returns getAppointmentsAppointmentsAppointment.Id, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointment) GetId() string { return v.Id }

// GetStartDateTime returns getAppointmentsAppointmentsAppointment.StartDateTime, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointment) GetStartDateTime() time.Time { return v.StartDateTime }

// GetEndDateTime returns getAppointmentsAppointmentsAppointment.EndDateTime, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointment) GetEndDateTime() time.Time { return v.EndDateTime }

// GetStatus returns getAppointmentsAppointmentsAppointment.Status, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointment) GetStatus() AppointmentStatus { return v.Status }

// GetDetail returns getAppointmentsAppointmentsAppointment.Detail, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointment) GetDetail() string { return v.Detail }

// GetDoctor returns getAppointmentsAppointmentsAppointment.Doctor, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointment) GetDoctor() *getAppointmentsAppointmentsAppointmentDoctor {
	return v.Doctor
}

// GetPatient returns getAppointmentsAppointmentsAppointment.Patient, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointment) GetPatient() *getAppointmentsAppointmentsAppointmentPatient {
	return v.Patient
}

// getAppointmentsAppointmentsAppointmentDoctor includes the requested fields of the GraphQL type Doctor.
type getAppointmentsAppointmentsAppointmentDoctor struct {
	Id            string `json:"id"`
	Initial_en    string `json:"initial_en"`
	Firstname_en  string `json:"firstname_en"`
	Lastname_en   string `json:"lastname_en"`
	Position      string `json:"position"`
	ProfilePicURL string `json:"profilePicURL"`
}

// GetId returns getAppointmentsAppointmentsAppointmentDoctor.Id, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointmentDoctor) GetId() string { return v.Id }

// GetInitial_en returns getAppointmentsAppointmentsAppointmentDoctor.Initial_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointmentDoctor) GetInitial_en() string { return v.Initial_en }

// GetFirstname_en returns getAppointmentsAppointmentsAppointmentDoctor.Firstname_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointmentDoctor) GetFirstname_en() string {
	return v.Firstname_en
}

// GetLastname_en returns getAppointmentsAppointmentsAppointmentDoctor.Lastname_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointmentDoctor) GetLastname_en() string { return v.Lastname_en }

// GetPosition returns getAppointmentsAppointmentsAppointmentDoctor.Position, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointmentDoctor) GetPosition() string { return v.Position }

// GetProfilePicURL returns getAppointmentsAppointmentsAppointmentDoctor.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointmentDoctor) GetProfilePicURL() string {
	return v.ProfilePicURL
}

// getAppointmentsAppointmentsAppointmentPatient includes the requested fields of the GraphQL type Patient.
type getAppointmentsAppointmentsAppointmentPatient struct {
	Id            string `json:"id"`
	Initial_en    string `json:"initial_en"`
	Firstname_en  string `json:"firstname_en"`
	Lastname_en   string `json:"lastname_en"`
	ProfilePicURL string `json:"profilePicURL"`
}

// GetId returns getAppointmentsAppointmentsAppointmentPatient.Id, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointmentPatient) GetId() string { return v.Id }

// GetInitial_en returns getAppointmentsAppointmentsAppointmentPatient.Initial_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointmentPatient) GetInitial_en() string { return v.Initial_en }

// GetFirstname_en returns getAppointmentsAppointmentsAppointmentPatient.Firstname_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointmentPatient) GetFirstname_en() string {
	return v.Firstname_en
}

// GetLastname_en returns getAppointmentsAppointmentsAppointmentPatient.Lastname_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointmentPatient) GetLastname_en() string { return v.Lastname_en }

// GetProfilePicURL returns getAppointmentsAppointmentsAppointmentPatient.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *getAppointmentsAppointmentsAppointmentPatient) GetProfilePicURL() string {
	return v.ProfilePicURL
}

// getAppointmentsResponse is returned by getAppointments on success.
type getAppointmentsResponse struct {
	Appointments []*getAppointmentsAppointmentsAppointment `json:"appointments"`
}

// GetAppointments returns getAppointmentsResponse.Appointments, and is useful for accessing the field via an interface.
func (v *getAppointmentsResponse) GetAppointments() []*getAppointmentsAppointmentsAppointment {
	return v.Appointments
}

// getAppointmentsWithPaginationAppointmentsAppointment includes the requested fields of the GraphQL type Appointment.
type getAppointmentsWithPaginationAppointmentsAppointment struct {
	StartDateTime time.Time                                                    `json:"startDateTime"`
	EndDateTime   time.Time                                                    `json:"endDateTime"`
	Patient       *getAppointmentsWithPaginationAppointmentsAppointmentPatient `json:"patient"`
	Doctor        *getAppointmentsWithPaginationAppointmentsAppointmentDoctor  `json:"doctor"`
	Status        AppointmentStatus                                            `json:"status"`
	Detail        string                                                       `json:"detail"`
	Id            string                                                       `json:"id"`
}

// GetId returns getAppointmentsWithPaginationAppointmentsAppointment.Id, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointment) GetId() string { return v.Id }

// GetStartDateTime returns getAppointmentsWithPaginationAppointmentsAppointment.StartDateTime, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointment) GetStartDateTime() time.Time {
	return v.StartDateTime
}

// GetEndDateTime returns getAppointmentsWithPaginationAppointmentsAppointment.EndDateTime, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointment) GetEndDateTime() time.Time {
	return v.EndDateTime
}

// GetStatus returns getAppointmentsWithPaginationAppointmentsAppointment.Status, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointment) GetStatus() AppointmentStatus {
	return v.Status
}

// GetDetail returns getAppointmentsWithPaginationAppointmentsAppointment.Detail, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointment) GetDetail() string { return v.Detail }

// GetDoctor returns getAppointmentsWithPaginationAppointmentsAppointment.Doctor, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointment) GetDoctor() *getAppointmentsWithPaginationAppointmentsAppointmentDoctor {
	return v.Doctor
}

// GetPatient returns getAppointmentsWithPaginationAppointmentsAppointment.Patient, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointment) GetPatient() *getAppointmentsWithPaginationAppointmentsAppointmentPatient {
	return v.Patient
}

// getAppointmentsWithPaginationAppointmentsAppointmentDoctor includes the requested fields of the GraphQL type Doctor.
type getAppointmentsWithPaginationAppointmentsAppointmentDoctor struct {
	Id            string `json:"id"`
	Initial_en    string `json:"initial_en"`
	Firstname_en  string `json:"firstname_en"`
	Lastname_en   string `json:"lastname_en"`
	Position      string `json:"position"`
	ProfilePicURL string `json:"profilePicURL"`
}

// GetId returns getAppointmentsWithPaginationAppointmentsAppointmentDoctor.Id, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointmentDoctor) GetId() string { return v.Id }

// GetInitial_en returns getAppointmentsWithPaginationAppointmentsAppointmentDoctor.Initial_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointmentDoctor) GetInitial_en() string {
	return v.Initial_en
}

// GetFirstname_en returns getAppointmentsWithPaginationAppointmentsAppointmentDoctor.Firstname_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointmentDoctor) GetFirstname_en() string {
	return v.Firstname_en
}

// GetLastname_en returns getAppointmentsWithPaginationAppointmentsAppointmentDoctor.Lastname_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointmentDoctor) GetLastname_en() string {
	return v.Lastname_en
}

// GetPosition returns getAppointmentsWithPaginationAppointmentsAppointmentDoctor.Position, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointmentDoctor) GetPosition() string {
	return v.Position
}

// GetProfilePicURL returns getAppointmentsWithPaginationAppointmentsAppointmentDoctor.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointmentDoctor) GetProfilePicURL() string {
	return v.ProfilePicURL
}

// getAppointmentsWithPaginationAppointmentsAppointmentPatient includes the requested fields of the GraphQL type Patient.
type getAppointmentsWithPaginationAppointmentsAppointmentPatient struct {
	Id            string `json:"id"`
	Initial_en    string `json:"initial_en"`
	Firstname_en  string `json:"firstname_en"`
	Lastname_en   string `json:"lastname_en"`
	ProfilePicURL string `json:"profilePicURL"`
}

// GetId returns getAppointmentsWithPaginationAppointmentsAppointmentPatient.Id, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointmentPatient) GetId() string { return v.Id }

// GetInitial_en returns getAppointmentsWithPaginationAppointmentsAppointmentPatient.Initial_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointmentPatient) GetInitial_en() string {
	return v.Initial_en
}

// GetFirstname_en returns getAppointmentsWithPaginationAppointmentsAppointmentPatient.Firstname_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointmentPatient) GetFirstname_en() string {
	return v.Firstname_en
}

// GetLastname_en returns getAppointmentsWithPaginationAppointmentsAppointmentPatient.Lastname_en, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointmentPatient) GetLastname_en() string {
	return v.Lastname_en
}

// GetProfilePicURL returns getAppointmentsWithPaginationAppointmentsAppointmentPatient.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationAppointmentsAppointmentPatient) GetProfilePicURL() string {
	return v.ProfilePicURL
}

// getAppointmentsWithPaginationResponse is returned by getAppointmentsWithPagination on success.
type getAppointmentsWithPaginationResponse struct {
	Appointments []*getAppointmentsWithPaginationAppointmentsAppointment `json:"appointments"`
}

// GetAppointments returns getAppointmentsWithPaginationResponse.Appointments, and is useful for accessing the field via an interface.
func (v *getAppointmentsWithPaginationResponse) GetAppointments() []*getAppointmentsWithPaginationAppointmentsAppointment {
	return v.Appointments
}

// getDoctorAppointmentAppointment includes the requested fields of the GraphQL type Appointment.
type getDoctorAppointmentAppointment struct {
	StartDateTime   time.Time                               `json:"startDateTime"`
	EndDateTime     time.Time                               `json:"endDateTime"`
	Patient         *getDoctorAppointmentAppointmentPatient `json:"patient"`
	Doctor          *getDoctorAppointmentAppointmentDoctor  `json:"doctor"`
	NextAppointment *time.Time                              `json:"nextAppointment"`
	Status          AppointmentStatus                       `json:"status"`
	Id              string                                  `json:"id"`
	Detail          string                                  `json:"detail"`
}

// GetId returns getDoctorAppointmentAppointment.Id, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointment) GetId() string { return v.Id }

// GetDetail returns getDoctorAppointmentAppointment.Detail, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointment) GetDetail() string { return v.Detail }

// GetStartDateTime returns getDoctorAppointmentAppointment.StartDateTime, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointment) GetStartDateTime() time.Time { return v.StartDateTime }

// GetEndDateTime returns getDoctorAppointmentAppointment.EndDateTime, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointment) GetEndDateTime() time.Time { return v.EndDateTime }

// GetNextAppointment returns getDoctorAppointmentAppointment.NextAppointment, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointment) GetNextAppointment() *time.Time { return v.NextAppointment }

// GetStatus returns getDoctorAppointmentAppointment.Status, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointment) GetStatus() AppointmentStatus { return v.Status }

// GetPatient returns getDoctorAppointmentAppointment.Patient, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointment) GetPatient() *getDoctorAppointmentAppointmentPatient {
	return v.Patient
}

// GetDoctor returns getDoctorAppointmentAppointment.Doctor, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointment) GetDoctor() *getDoctorAppointmentAppointmentDoctor {
	return v.Doctor
}

// getDoctorAppointmentAppointmentDoctor includes the requested fields of the GraphQL type Doctor.
type getDoctorAppointmentAppointmentDoctor struct {
	Id            string `json:"id"`
	Initial_en    string `json:"initial_en"`
	Firstname_en  string `json:"firstname_en"`
	Lastname_en   string `json:"lastname_en"`
	Position      string `json:"position"`
	ProfilePicURL string `json:"profilePicURL"`
}

// GetId returns getDoctorAppointmentAppointmentDoctor.Id, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentDoctor) GetId() string { return v.Id }

// GetInitial_en returns getDoctorAppointmentAppointmentDoctor.Initial_en, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentDoctor) GetInitial_en() string { return v.Initial_en }

// GetFirstname_en returns getDoctorAppointmentAppointmentDoctor.Firstname_en, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentDoctor) GetFirstname_en() string { return v.Firstname_en }

// GetLastname_en returns getDoctorAppointmentAppointmentDoctor.Lastname_en, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentDoctor) GetLastname_en() string { return v.Lastname_en }

// GetPosition returns getDoctorAppointmentAppointmentDoctor.Position, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentDoctor) GetPosition() string { return v.Position }

// GetProfilePicURL returns getDoctorAppointmentAppointmentDoctor.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentDoctor) GetProfilePicURL() string { return v.ProfilePicURL }

// getDoctorAppointmentAppointmentPatient includes the requested fields of the GraphQL type Patient.
type getDoctorAppointmentAppointmentPatient struct {
	BirthDate     time.Time `json:"birthDate"`
	Id            string    `json:"id"`
	Initial_en    string    `json:"initial_en"`
	Firstname_en  string    `json:"firstname_en"`
	Lastname_en   string    `json:"lastname_en"`
	BloodType     BloodType `json:"bloodType"`
	ProfilePicURL string    `json:"profilePicURL"`
	Height        float64   `json:"height"`
	Weight        float64   `json:"weight"`
}

// GetId returns getDoctorAppointmentAppointmentPatient.Id, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentPatient) GetId() string { return v.Id }

// GetInitial_en returns getDoctorAppointmentAppointmentPatient.Initial_en, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentPatient) GetInitial_en() string { return v.Initial_en }

// GetFirstname_en returns getDoctorAppointmentAppointmentPatient.Firstname_en, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentPatient) GetFirstname_en() string { return v.Firstname_en }

// GetLastname_en returns getDoctorAppointmentAppointmentPatient.Lastname_en, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentPatient) GetLastname_en() string { return v.Lastname_en }

// GetBirthDate returns getDoctorAppointmentAppointmentPatient.BirthDate, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentPatient) GetBirthDate() time.Time { return v.BirthDate }

// GetBloodType returns getDoctorAppointmentAppointmentPatient.BloodType, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentPatient) GetBloodType() BloodType { return v.BloodType }

// GetHeight returns getDoctorAppointmentAppointmentPatient.Height, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentPatient) GetHeight() float64 { return v.Height }

// GetWeight returns getDoctorAppointmentAppointmentPatient.Weight, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentPatient) GetWeight() float64 { return v.Weight }

// GetProfilePicURL returns getDoctorAppointmentAppointmentPatient.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentAppointmentPatient) GetProfilePicURL() string { return v.ProfilePicURL }

// getDoctorAppointmentResponse is returned by getDoctorAppointment on success.
type getDoctorAppointmentResponse struct {
	Appointment *getDoctorAppointmentAppointment `json:"appointment"`
}

// GetAppointment returns getDoctorAppointmentResponse.Appointment, and is useful for accessing the field via an interface.
func (v *getDoctorAppointmentResponse) GetAppointment() *getDoctorAppointmentAppointment {
	return v.Appointment
}

// getDoctorDoctor includes the requested fields of the GraphQL type Doctor.
type getDoctorDoctor struct {
	CreatedAt     time.Time `json:"createdAt"`
	Firstname_en  string    `json:"firstname_en"`
	Firstname_th  string    `json:"firstname_th"`
	Id            string    `json:"id"`
	Initial_en    string    `json:"initial_en"`
	Initial_th    string    `json:"initial_th"`
	Lastname_en   string    `json:"lastname_en"`
	Lastname_th   string    `json:"lastname_th"`
	Position      string    `json:"position"`
	UpdatedAt     time.Time `json:"updatedAt"`
	Username      string    `json:"username"`
	ProfilePicURL string    `json:"profilePicURL"`
}

// GetCreatedAt returns getDoctorDoctor.CreatedAt, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetCreatedAt() time.Time { return v.CreatedAt }

// GetFirstname_en returns getDoctorDoctor.Firstname_en, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetFirstname_en() string { return v.Firstname_en }

// GetFirstname_th returns getDoctorDoctor.Firstname_th, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetFirstname_th() string { return v.Firstname_th }

// GetId returns getDoctorDoctor.Id, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetId() string { return v.Id }

// GetInitial_en returns getDoctorDoctor.Initial_en, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetInitial_en() string { return v.Initial_en }

// GetInitial_th returns getDoctorDoctor.Initial_th, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetInitial_th() string { return v.Initial_th }

// GetLastname_en returns getDoctorDoctor.Lastname_en, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetLastname_en() string { return v.Lastname_en }

// GetLastname_th returns getDoctorDoctor.Lastname_th, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetLastname_th() string { return v.Lastname_th }

// GetPosition returns getDoctorDoctor.Position, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetPosition() string { return v.Position }

// GetUpdatedAt returns getDoctorDoctor.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUsername returns getDoctorDoctor.Username, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetUsername() string { return v.Username }

// GetProfilePicURL returns getDoctorDoctor.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *getDoctorDoctor) GetProfilePicURL() string { return v.ProfilePicURL }

// getDoctorResponse is returned by getDoctor on success.
type getDoctorResponse struct {
	Doctor *getDoctorDoctor `json:"doctor"`
}

// GetDoctor returns getDoctorResponse.Doctor, and is useful for accessing the field via an interface.
func (v *getDoctorResponse) GetDoctor() *getDoctorDoctor { return v.Doctor }

// getInvoiceInvoice includes the requested fields of the GraphQL type Invoice.
type getInvoiceInvoice struct {
	CreatedAt       time.Time                           `json:"createdAt"`
	Appointment     *getInvoiceInvoiceAppointment       `json:"appointment"`
	Id              string                              `json:"id"`
	InvoiceDiscount []*getInvoiceInvoiceInvoiceDiscount `json:"InvoiceDiscount"`
	Total           float64                             `json:"total"`
	Paid            bool                                `json:"paid"`
}

// GetCreatedAt returns getInvoiceInvoice.CreatedAt, and is useful for accessing the field via an interface.
func (v *getInvoiceInvoice) GetCreatedAt() time.Time { return v.CreatedAt }

// GetId returns getInvoiceInvoice.Id, and is useful for accessing the field via an interface.
func (v *getInvoiceInvoice) GetId() string { return v.Id }

// GetPaid returns getInvoiceInvoice.Paid, and is useful for accessing the field via an interface.
func (v *getInvoiceInvoice) GetPaid() bool { return v.Paid }

// GetTotal returns getInvoiceInvoice.Total, and is useful for accessing the field via an interface.
func (v *getInvoiceInvoice) GetTotal() float64 { return v.Total }

// GetAppointment returns getInvoiceInvoice.Appointment, and is useful for accessing the field via an interface.
func (v *getInvoiceInvoice) GetAppointment() *getInvoiceInvoiceAppointment { return v.Appointment }

// GetInvoiceDiscount returns getInvoiceInvoice.InvoiceDiscount, and is useful for accessing the field via an interface.
func (v *getInvoiceInvoice) GetInvoiceDiscount() []*getInvoiceInvoiceInvoiceDiscount {
	return v.InvoiceDiscount
}

// getInvoiceInvoiceAppointment includes the requested fields of the GraphQL type Appointment.
type getInvoiceInvoiceAppointment struct {
	Id        string `json:"id"`
	PatientId string `json:"patientId"`
}

// GetId returns getInvoiceInvoiceAppointment.Id, and is useful for accessing the field via an interface.
func (v *getInvoiceInvoiceAppointment) GetId() string { return v.Id }

// GetPatientId returns getInvoiceInvoiceAppointment.PatientId, and is useful for accessing the field via an interface.
func (v *getInvoiceInvoiceAppointment) GetPatientId() string { return v.PatientId }

// getInvoiceInvoiceInvoiceDiscount includes the requested fields of the GraphQL type InvoiceDiscount.
type getInvoiceInvoiceInvoiceDiscount struct {
	Name   string  `json:"name"`
	Amount float64 `json:"amount"`
}

// GetName returns getInvoiceInvoiceInvoiceDiscount.Name, and is useful for accessing the field via an interface.
func (v *getInvoiceInvoiceInvoiceDiscount) GetName() string { return v.Name }

// GetAmount returns getInvoiceInvoiceInvoiceDiscount.Amount, and is useful for accessing the field via an interface.
func (v *getInvoiceInvoiceInvoiceDiscount) GetAmount() float64 { return v.Amount }

// getInvoiceResponse is returned by getInvoice on success.
type getInvoiceResponse struct {
	Invoice *getInvoiceInvoice `json:"invoice"`
}

// GetInvoice returns getInvoiceResponse.Invoice, and is useful for accessing the field via an interface.
func (v *getInvoiceResponse) GetInvoice() *getInvoiceInvoice { return v.Invoice }

// getPatientPatient includes the requested fields of the GraphQL type Patient.
type getPatientPatient struct {
	UpdatedAt     time.Time `json:"updatedAt"`
	CreatedAt     time.Time `json:"createdAt"`
	BirthDate     time.Time `json:"birthDate"`
	PassportId    *string   `json:"passportId"`
	NationalId    *string   `json:"nationalId"`
	Lastname_en   string    `json:"lastname_en"`
	Id            string    `json:"id"`
	Initial_en    string    `json:"initial_en"`
	Initial_th    string    `json:"initial_th"`
	Firstname_th  string    `json:"firstname_th"`
	Lastname_th   string    `json:"lastname_th"`
	Firstname_en  string    `json:"firstname_en"`
	Nationality   string    `json:"nationality"`
	BloodType     BloodType `json:"bloodType"`
	PhoneNumber   string    `json:"phoneNumber"`
	ProfilePicURL string    `json:"profilePicURL"`
	Height        float64   `json:"height"`
	Weight        float64   `json:"weight"`
}

// GetBirthDate returns getPatientPatient.BirthDate, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetBirthDate() time.Time { return v.BirthDate }

// GetBloodType returns getPatientPatient.BloodType, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetBloodType() BloodType { return v.BloodType }

// GetCreatedAt returns getPatientPatient.CreatedAt, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetCreatedAt() time.Time { return v.CreatedAt }

// GetFirstname_en returns getPatientPatient.Firstname_en, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetFirstname_en() string { return v.Firstname_en }

// GetFirstname_th returns getPatientPatient.Firstname_th, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetFirstname_th() string { return v.Firstname_th }

// GetHeight returns getPatientPatient.Height, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetHeight() float64 { return v.Height }

// GetId returns getPatientPatient.Id, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetId() string { return v.Id }

// GetInitial_en returns getPatientPatient.Initial_en, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetInitial_en() string { return v.Initial_en }

// GetInitial_th returns getPatientPatient.Initial_th, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetInitial_th() string { return v.Initial_th }

// GetLastname_en returns getPatientPatient.Lastname_en, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetLastname_en() string { return v.Lastname_en }

// GetLastname_th returns getPatientPatient.Lastname_th, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetLastname_th() string { return v.Lastname_th }

// GetNationalId returns getPatientPatient.NationalId, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetNationalId() *string { return v.NationalId }

// GetNationality returns getPatientPatient.Nationality, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetNationality() string { return v.Nationality }

// GetPassportId returns getPatientPatient.PassportId, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetPassportId() *string { return v.PassportId }

// GetPhoneNumber returns getPatientPatient.PhoneNumber, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetPhoneNumber() string { return v.PhoneNumber }

// GetUpdatedAt returns getPatientPatient.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetWeight returns getPatientPatient.Weight, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetWeight() float64 { return v.Weight }

// GetProfilePicURL returns getPatientPatient.ProfilePicURL, and is useful for accessing the field via an interface.
func (v *getPatientPatient) GetProfilePicURL() string { return v.ProfilePicURL }

// getPatientResponse is returned by getPatient on success.
type getPatientResponse struct {
	Patient *getPatientPatient `json:"patient"`
}

// GetPatient returns getPatientResponse.Patient, and is useful for accessing the field via an interface.
func (v *getPatientResponse) GetPatient() *getPatientPatient { return v.Patient }

// paidInvoicePaidInvoice includes the requested fields of the GraphQL type Invoice.
type paidInvoicePaidInvoice struct {
	Id            string  `json:"id"`
	Paid          bool    `json:"paid"`
	Total         float64 `json:"total"`
	AppointmentId int     `json:"appointmentId"`
}

// GetId returns paidInvoicePaidInvoice.Id, and is useful for accessing the field via an interface.
func (v *paidInvoicePaidInvoice) GetId() string { return v.Id }

// GetPaid returns paidInvoicePaidInvoice.Paid, and is useful for accessing the field via an interface.
func (v *paidInvoicePaidInvoice) GetPaid() bool { return v.Paid }

// GetTotal returns paidInvoicePaidInvoice.Total, and is useful for accessing the field via an interface.
func (v *paidInvoicePaidInvoice) GetTotal() float64 { return v.Total }

// GetAppointmentId returns paidInvoicePaidInvoice.AppointmentId, and is useful for accessing the field via an interface.
func (v *paidInvoicePaidInvoice) GetAppointmentId() int { return v.AppointmentId }

// paidInvoiceResponse is returned by paidInvoice on success.
type paidInvoiceResponse struct {
	PaidInvoice *paidInvoicePaidInvoice `json:"paidInvoice"`
}

// GetPaidInvoice returns paidInvoiceResponse.PaidInvoice, and is useful for accessing the field via an interface.
func (v *paidInvoiceResponse) GetPaidInvoice() *paidInvoicePaidInvoice { return v.PaidInvoice }

// setAppointmentStatusResponse is returned by setAppointmentStatus on success.
type setAppointmentStatusResponse struct {
	SetAppointmentStatus *setAppointmentStatusSetAppointmentStatusAppointment `json:"setAppointmentStatus"`
}

// GetSetAppointmentStatus returns setAppointmentStatusResponse.SetAppointmentStatus, and is useful for accessing the field via an interface.
func (v *setAppointmentStatusResponse) GetSetAppointmentStatus() *setAppointmentStatusSetAppointmentStatusAppointment {
	return v.SetAppointmentStatus
}

// setAppointmentStatusSetAppointmentStatusAppointment includes the requested fields of the GraphQL type Appointment.
type setAppointmentStatusSetAppointmentStatusAppointment struct {
	Id     string            `json:"id"`
	Status AppointmentStatus `json:"status"`
}

// GetId returns setAppointmentStatusSetAppointmentStatusAppointment.Id, and is useful for accessing the field via an interface.
func (v *setAppointmentStatusSetAppointmentStatusAppointment) GetId() string { return v.Id }

// GetStatus returns setAppointmentStatusSetAppointmentStatusAppointment.Status, and is useful for accessing the field via an interface.
func (v *setAppointmentStatusSetAppointmentStatusAppointment) GetStatus() AppointmentStatus {
	return v.Status
}

func assertDoctorCredential(
	ctx context.Context,
	client graphql.Client,
	password string,
	username string,
) (*assertDoctorCredentialResponse, error) {
	req := &graphql.Request{
		OpName: "assertDoctorCredential",
		Query: `
query assertDoctorCredential ($password: String!, $username: String!) {
	assertDoctorPassword(password: $password, username: $username)
}
`,
		Variables: &__assertDoctorCredentialInput{
			Password: password,
			Username: username,
		},
	}
	var err error

	var data assertDoctorCredentialResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getAppointment(
	ctx context.Context,
	client graphql.Client,
	where *AppointmentWhereInput,
) (*getAppointmentResponse, error) {
	req := &graphql.Request{
		OpName: "getAppointment",
		Query: `
query getAppointment ($where: AppointmentWhereInput!) {
	appointment(where: $where) {
		id
		patientId
		startDateTime
		endDateTime
		detail
		status
		nextAppointment
		doctor {
			id
			initial_en
			firstname_en
			lastname_en
			position
			profilePicURL
		}
		invoice {
			id
			total
			paid
			invoiceItems {
				name
				price
				quantity
			}
			InvoiceDiscount {
				id
				name
				amount
			}
		}
		prescriptions {
			amount
			medicine {
				name
				description
				pictureURL
			}
		}
	}
}
`,
		Variables: &__getAppointmentInput{
			Where: where,
		},
	}
	var err error

	var data getAppointmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getAppointmentIds(
	ctx context.Context,
	client graphql.Client,
	where *AppointmentWhereInput,
) (*getAppointmentIdsResponse, error) {
	req := &graphql.Request{
		OpName: "getAppointmentIds",
		Query: `
query getAppointmentIds ($where: AppointmentWhereInput) {
	appointments(where: $where) {
		id
	}
}
`,
		Variables: &__getAppointmentIdsInput{
			Where: where,
		},
	}
	var err error

	var data getAppointmentIdsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getAppointments(
	ctx context.Context,
	client graphql.Client,
	where *AppointmentWhereInput,
	orderBy []*AppointmentOrderByWithRelationInput,
) (*getAppointmentsResponse, error) {
	req := &graphql.Request{
		OpName: "getAppointments",
		Query: `
query getAppointments ($where: AppointmentWhereInput, $orderBy: [AppointmentOrderByWithRelationInput!]) {
	appointments(where: $where, orderBy: $orderBy) {
		id
		startDateTime
		endDateTime
		status
		detail
		doctor {
			id
			initial_en
			firstname_en
			lastname_en
			position
			profilePicURL
		}
		patient {
			id
			initial_en
			firstname_en
			lastname_en
			profilePicURL
		}
	}
}
`,
		Variables: &__getAppointmentsInput{
			Where:   where,
			OrderBy: orderBy,
		},
	}
	var err error

	var data getAppointmentsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getAppointmentsWithPagination(
	ctx context.Context,
	client graphql.Client,
	where *AppointmentWhereInput,
	orderBy []*AppointmentOrderByWithRelationInput,
	take *int,
	skip *int,
) (*getAppointmentsWithPaginationResponse, error) {
	req := &graphql.Request{
		OpName: "getAppointmentsWithPagination",
		Query: `
query getAppointmentsWithPagination ($where: AppointmentWhereInput, $orderBy: [AppointmentOrderByWithRelationInput!], $take: Int, $skip: Int) {
	appointments(where: $where, orderBy: $orderBy, take: $take, skip: $skip) {
		id
		startDateTime
		endDateTime
		status
		detail
		doctor {
			id
			initial_en
			firstname_en
			lastname_en
			position
			profilePicURL
		}
		patient {
			id
			initial_en
			firstname_en
			lastname_en
			profilePicURL
		}
	}
}
`,
		Variables: &__getAppointmentsWithPaginationInput{
			Where:   where,
			OrderBy: orderBy,
			Take:    take,
			Skip:    skip,
		},
	}
	var err error

	var data getAppointmentsWithPaginationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDoctor(
	ctx context.Context,
	client graphql.Client,
	where *DoctorWhereInput,
) (*getDoctorResponse, error) {
	req := &graphql.Request{
		OpName: "getDoctor",
		Query: `
query getDoctor ($where: DoctorWhereInput!) {
	doctor(where: $where) {
		createdAt
		firstname_en
		firstname_th
		id
		initial_en
		initial_th
		lastname_en
		lastname_th
		position
		updatedAt
		username
		profilePicURL
	}
}
`,
		Variables: &__getDoctorInput{
			Where: where,
		},
	}
	var err error

	var data getDoctorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDoctorAppointment(
	ctx context.Context,
	client graphql.Client,
	where *AppointmentWhereInput,
) (*getDoctorAppointmentResponse, error) {
	req := &graphql.Request{
		OpName: "getDoctorAppointment",
		Query: `
query getDoctorAppointment ($where: AppointmentWhereInput!) {
	appointment(where: $where) {
		id
		detail
		startDateTime
		endDateTime
		nextAppointment
		status
		patient {
			id
			initial_en
			firstname_en
			lastname_en
			birthDate
			bloodType
			height
			weight
			profilePicURL
		}
		doctor {
			id
			initial_en
			firstname_en
			lastname_en
			position
			profilePicURL
		}
	}
}
`,
		Variables: &__getDoctorAppointmentInput{
			Where: where,
		},
	}
	var err error

	var data getDoctorAppointmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getInvoice(
	ctx context.Context,
	client graphql.Client,
	where *InvoiceWhereInput,
) (*getInvoiceResponse, error) {
	req := &graphql.Request{
		OpName: "getInvoice",
		Query: `
query getInvoice ($where: InvoiceWhereInput!) {
	invoice(where: $where) {
		createdAt
		id
		paid
		total
		appointment {
			id
			patientId
		}
		InvoiceDiscount {
			name
			amount
		}
	}
}
`,
		Variables: &__getInvoiceInput{
			Where: where,
		},
	}
	var err error

	var data getInvoiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getPatient(
	ctx context.Context,
	client graphql.Client,
	where *PatientWhereInput,
) (*getPatientResponse, error) {
	req := &graphql.Request{
		OpName: "getPatient",
		Query: `
query getPatient ($where: PatientWhereInput!) {
	patient(where: $where) {
		birthDate
		bloodType
		createdAt
		firstname_en
		firstname_th
		height
		id
		initial_en
		initial_th
		lastname_en
		lastname_th
		nationalId
		nationality
		passportId
		phoneNumber
		updatedAt
		weight
		profilePicURL
	}
}
`,
		Variables: &__getPatientInput{
			Where: where,
		},
	}
	var err error

	var data getPatientResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func paidInvoice(
	ctx context.Context,
	client graphql.Client,
	paidInvoiceId float64,
) (*paidInvoiceResponse, error) {
	req := &graphql.Request{
		OpName: "paidInvoice",
		Query: `
mutation paidInvoice ($paidInvoiceId: Float!) {
	paidInvoice(id: $paidInvoiceId) {
		id
		paid
		total
		appointmentId
	}
}
`,
		Variables: &__paidInvoiceInput{
			PaidInvoiceId: paidInvoiceId,
		},
	}
	var err error

	var data paidInvoiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func setAppointmentStatus(
	ctx context.Context,
	client graphql.Client,
	setAppointmentStatusId float64,
	status AppointmentStatus,
) (*setAppointmentStatusResponse, error) {
	req := &graphql.Request{
		OpName: "setAppointmentStatus",
		Query: `
mutation setAppointmentStatus ($setAppointmentStatusId: Float!, $status: AppointmentStatus!) {
	setAppointmentStatus(id: $setAppointmentStatusId, status: $status) {
		id
		status
	}
}
`,
		Variables: &__setAppointmentStatusInput{
			SetAppointmentStatusId: setAppointmentStatusId,
			Status:                 status,
		},
	}
	var err error

	var data setAppointmentStatusResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
