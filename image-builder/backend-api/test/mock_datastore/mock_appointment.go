// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datastore/appointment.go

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datastore "github.com/synthia-telemed/backend-api/pkg/datastore"
)

// MockAppointmentDataStore is a mock of AppointmentDataStore interface.
type MockAppointmentDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentDataStoreMockRecorder
}

// MockAppointmentDataStoreMockRecorder is the mock recorder for MockAppointmentDataStore.
type MockAppointmentDataStoreMockRecorder struct {
	mock *MockAppointmentDataStore
}

// NewMockAppointmentDataStore creates a new mock instance.
func NewMockAppointmentDataStore(ctrl *gomock.Controller) *MockAppointmentDataStore {
	mock := &MockAppointmentDataStore{ctrl: ctrl}
	mock.recorder = &MockAppointmentDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppointmentDataStore) EXPECT() *MockAppointmentDataStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAppointmentDataStore) Create(appointment *datastore.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", appointment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAppointmentDataStoreMockRecorder) Create(appointment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppointmentDataStore)(nil).Create), appointment)
}

// FindByRefID mocks base method.
func (m *MockAppointmentDataStore) FindByRefID(refID string) (*datastore.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRefID", refID)
	ret0, _ := ret[0].(*datastore.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRefID indicates an expected call of FindByRefID.
func (mr *MockAppointmentDataStoreMockRecorder) FindByRefID(refID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRefID", reflect.TypeOf((*MockAppointmentDataStore)(nil).FindByRefID), refID)
}
