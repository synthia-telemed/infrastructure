// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datastore/payment.go

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datastore "github.com/synthia-telemed/backend-api/pkg/datastore"
)

// MockPaymentDataStore is a mock of PaymentDataStore interface.
type MockPaymentDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentDataStoreMockRecorder
}

// MockPaymentDataStoreMockRecorder is the mock recorder for MockPaymentDataStore.
type MockPaymentDataStoreMockRecorder struct {
	mock *MockPaymentDataStore
}

// NewMockPaymentDataStore creates a new mock instance.
func NewMockPaymentDataStore(ctrl *gomock.Controller) *MockPaymentDataStore {
	mock := &MockPaymentDataStore{ctrl: ctrl}
	mock.recorder = &MockPaymentDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentDataStore) EXPECT() *MockPaymentDataStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentDataStore) Create(payment *datastore.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPaymentDataStoreMockRecorder) Create(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentDataStore)(nil).Create), payment)
}

// FindLatestByInvoiceIDAndStatus mocks base method.
func (m *MockPaymentDataStore) FindLatestByInvoiceIDAndStatus(invoiceID int, status datastore.PaymentStatus) (*datastore.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestByInvoiceIDAndStatus", invoiceID, status)
	ret0, _ := ret[0].(*datastore.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestByInvoiceIDAndStatus indicates an expected call of FindLatestByInvoiceIDAndStatus.
func (mr *MockPaymentDataStoreMockRecorder) FindLatestByInvoiceIDAndStatus(invoiceID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestByInvoiceIDAndStatus", reflect.TypeOf((*MockPaymentDataStore)(nil).FindLatestByInvoiceIDAndStatus), invoiceID, status)
}
