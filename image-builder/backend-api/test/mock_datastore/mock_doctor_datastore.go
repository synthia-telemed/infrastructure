// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datastore/doctor.go

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datastore "github.com/synthia-telemed/backend-api/pkg/datastore"
)

// MockDoctorDataStore is a mock of DoctorDataStore interface.
type MockDoctorDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDoctorDataStoreMockRecorder
}

// MockDoctorDataStoreMockRecorder is the mock recorder for MockDoctorDataStore.
type MockDoctorDataStoreMockRecorder struct {
	mock *MockDoctorDataStore
}

// NewMockDoctorDataStore creates a new mock instance.
func NewMockDoctorDataStore(ctrl *gomock.Controller) *MockDoctorDataStore {
	mock := &MockDoctorDataStore{ctrl: ctrl}
	mock.recorder = &MockDoctorDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoctorDataStore) EXPECT() *MockDoctorDataStoreMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockDoctorDataStore) FindByID(id uint) (*datastore.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*datastore.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockDoctorDataStoreMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockDoctorDataStore)(nil).FindByID), id)
}

// FindOrCreate mocks base method.
func (m *MockDoctorDataStore) FindOrCreate(doctor *datastore.Doctor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreate", doctor)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOrCreate indicates an expected call of FindOrCreate.
func (mr *MockDoctorDataStoreMockRecorder) FindOrCreate(doctor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreate", reflect.TypeOf((*MockDoctorDataStore)(nil).FindOrCreate), doctor)
}
