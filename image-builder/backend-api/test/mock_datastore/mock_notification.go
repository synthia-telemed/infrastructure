// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datastore/notification.go

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datastore "github.com/synthia-telemed/backend-api/pkg/datastore"
)

// MockNotificationDataStore is a mock of NotificationDataStore interface.
type MockNotificationDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationDataStoreMockRecorder
}

// MockNotificationDataStoreMockRecorder is the mock recorder for MockNotificationDataStore.
type MockNotificationDataStoreMockRecorder struct {
	mock *MockNotificationDataStore
}

// NewMockNotificationDataStore creates a new mock instance.
func NewMockNotificationDataStore(ctrl *gomock.Controller) *MockNotificationDataStore {
	mock := &MockNotificationDataStore{ctrl: ctrl}
	mock.recorder = &MockNotificationDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationDataStore) EXPECT() *MockNotificationDataStoreMockRecorder {
	return m.recorder
}

// CountUnRead mocks base method.
func (m *MockNotificationDataStore) CountUnRead(patientID uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnRead", patientID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnRead indicates an expected call of CountUnRead.
func (mr *MockNotificationDataStoreMockRecorder) CountUnRead(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnRead", reflect.TypeOf((*MockNotificationDataStore)(nil).CountUnRead), patientID)
}

// Create mocks base method.
func (m *MockNotificationDataStore) Create(notification *datastore.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNotificationDataStoreMockRecorder) Create(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationDataStore)(nil).Create), notification)
}

// FindByID mocks base method.
func (m *MockNotificationDataStore) FindByID(id uint) (*datastore.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*datastore.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockNotificationDataStoreMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockNotificationDataStore)(nil).FindByID), id)
}

// ListLatest mocks base method.
func (m *MockNotificationDataStore) ListLatest(patientID uint) ([]datastore.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLatest", patientID)
	ret0, _ := ret[0].([]datastore.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLatest indicates an expected call of ListLatest.
func (mr *MockNotificationDataStoreMockRecorder) ListLatest(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLatest", reflect.TypeOf((*MockNotificationDataStore)(nil).ListLatest), patientID)
}

// SetAllAsRead mocks base method.
func (m *MockNotificationDataStore) SetAllAsRead(patientID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAllAsRead", patientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAllAsRead indicates an expected call of SetAllAsRead.
func (mr *MockNotificationDataStoreMockRecorder) SetAllAsRead(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllAsRead", reflect.TypeOf((*MockNotificationDataStore)(nil).SetAllAsRead), patientID)
}

// SetAsRead mocks base method.
func (m *MockNotificationDataStore) SetAsRead(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAsRead", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAsRead indicates an expected call of SetAsRead.
func (mr *MockNotificationDataStoreMockRecorder) SetAsRead(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsRead", reflect.TypeOf((*MockNotificationDataStore)(nil).SetAsRead), id)
}
