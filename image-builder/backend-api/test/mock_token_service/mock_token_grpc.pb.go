// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/token/proto/token_grpc.pb.go

// Package mock_token_service is a generated GoMock package.
package mock_token_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/synthia-telemed/backend-api/pkg/token/proto"
	grpc "google.golang.org/grpc"
)

// MockTokenClient is a mock of TokenClient interface.
type MockTokenClient struct {
	ctrl     *gomock.Controller
	recorder *MockTokenClientMockRecorder
}

// MockTokenClientMockRecorder is the mock recorder for MockTokenClient.
type MockTokenClientMockRecorder struct {
	mock *MockTokenClient
}

// NewMockTokenClient creates a new mock instance.
func NewMockTokenClient(ctrl *gomock.Controller) *MockTokenClient {
	mock := &MockTokenClient{ctrl: ctrl}
	mock.recorder = &MockTokenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenClient) EXPECT() *MockTokenClientMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockTokenClient) GenerateToken(ctx context.Context, in *proto.GenerateTokenRequest, opts ...grpc.CallOption) (*proto.TokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateToken", varargs...)
	ret0, _ := ret[0].(*proto.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenClientMockRecorder) GenerateToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenClient)(nil).GenerateToken), varargs...)
}

// MockTokenServer is a mock of TokenServer interface.
type MockTokenServer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServerMockRecorder
}

// MockTokenServerMockRecorder is the mock recorder for MockTokenServer.
type MockTokenServerMockRecorder struct {
	mock *MockTokenServer
}

// NewMockTokenServer creates a new mock instance.
func NewMockTokenServer(ctrl *gomock.Controller) *MockTokenServer {
	mock := &MockTokenServer{ctrl: ctrl}
	mock.recorder = &MockTokenServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenServer) EXPECT() *MockTokenServerMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockTokenServer) GenerateToken(arg0 context.Context, arg1 *proto.GenerateTokenRequest) (*proto.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", arg0, arg1)
	ret0, _ := ret[0].(*proto.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenServerMockRecorder) GenerateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenServer)(nil).GenerateToken), arg0, arg1)
}

// mustEmbedUnimplementedTokenServer mocks base method.
func (m *MockTokenServer) mustEmbedUnimplementedTokenServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTokenServer")
}

// mustEmbedUnimplementedTokenServer indicates an expected call of mustEmbedUnimplementedTokenServer.
func (mr *MockTokenServerMockRecorder) mustEmbedUnimplementedTokenServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTokenServer", reflect.TypeOf((*MockTokenServer)(nil).mustEmbedUnimplementedTokenServer))
}

// MockUnsafeTokenServer is a mock of UnsafeTokenServer interface.
type MockUnsafeTokenServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTokenServerMockRecorder
}

// MockUnsafeTokenServerMockRecorder is the mock recorder for MockUnsafeTokenServer.
type MockUnsafeTokenServerMockRecorder struct {
	mock *MockUnsafeTokenServer
}

// NewMockUnsafeTokenServer creates a new mock instance.
func NewMockUnsafeTokenServer(ctrl *gomock.Controller) *MockUnsafeTokenServer {
	mock := &MockUnsafeTokenServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTokenServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTokenServer) EXPECT() *MockUnsafeTokenServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTokenServer mocks base method.
func (m *MockUnsafeTokenServer) mustEmbedUnimplementedTokenServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTokenServer")
}

// mustEmbedUnimplementedTokenServer indicates an expected call of mustEmbedUnimplementedTokenServer.
func (mr *MockUnsafeTokenServerMockRecorder) mustEmbedUnimplementedTokenServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTokenServer", reflect.TypeOf((*MockUnsafeTokenServer)(nil).mustEmbedUnimplementedTokenServer))
}
