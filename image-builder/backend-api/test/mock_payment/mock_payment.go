// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/payment/client.go

// Package mock_payment is a generated GoMock package.
package mock_payment

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payment "github.com/synthia-telemed/backend-api/pkg/payment"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddCreditCard mocks base method.
func (m *MockClient) AddCreditCard(customerID, cardToken string) (*payment.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCreditCard", customerID, cardToken)
	ret0, _ := ret[0].(*payment.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCreditCard indicates an expected call of AddCreditCard.
func (mr *MockClientMockRecorder) AddCreditCard(customerID, cardToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCreditCard", reflect.TypeOf((*MockClient)(nil).AddCreditCard), customerID, cardToken)
}

// CreateCustomer mocks base method.
func (m *MockClient) CreateCustomer(patientID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", patientID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockClientMockRecorder) CreateCustomer(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockClient)(nil).CreateCustomer), patientID)
}

// PayWithCreditCard mocks base method.
func (m *MockClient) PayWithCreditCard(customerID, cardID, refID string, amount int) (*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayWithCreditCard", customerID, cardID, refID, amount)
	ret0, _ := ret[0].(*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayWithCreditCard indicates an expected call of PayWithCreditCard.
func (mr *MockClientMockRecorder) PayWithCreditCard(customerID, cardID, refID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayWithCreditCard", reflect.TypeOf((*MockClient)(nil).PayWithCreditCard), customerID, cardID, refID, amount)
}

// RemoveCreditCard mocks base method.
func (m *MockClient) RemoveCreditCard(customerID, cardID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCreditCard", customerID, cardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCreditCard indicates an expected call of RemoveCreditCard.
func (mr *MockClientMockRecorder) RemoveCreditCard(customerID, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCreditCard", reflect.TypeOf((*MockClient)(nil).RemoveCreditCard), customerID, cardID)
}
